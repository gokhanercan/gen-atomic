# Generated from SQLiteParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,193,2062,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,1,0,5,0,228,8,0,10,0,12,
        0,231,9,0,1,0,1,0,1,1,5,1,236,8,1,10,1,12,1,239,9,1,1,1,1,1,4,1,
        243,8,1,11,1,12,1,244,1,1,5,1,248,8,1,10,1,12,1,251,9,1,1,1,5,1,
        254,8,1,10,1,12,1,257,9,1,1,2,1,2,1,2,3,2,262,8,2,3,2,264,8,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,290,8,2,1,3,1,3,1,3,1,3,1,3,3,
        3,297,8,3,1,3,1,3,1,3,1,3,1,3,3,3,304,8,3,1,3,1,3,1,3,1,3,3,3,310,
        8,3,1,3,1,3,3,3,314,8,3,1,3,1,3,1,3,3,3,319,8,3,1,3,3,3,322,8,3,
        1,4,1,4,1,4,1,4,1,4,3,4,329,8,4,1,4,3,4,332,8,4,1,5,1,5,3,5,336,
        8,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,344,8,6,1,6,1,6,3,6,348,8,6,3,6,
        350,8,6,1,7,1,7,3,7,354,8,7,1,8,1,8,3,8,358,8,8,1,8,1,8,3,8,362,
        8,8,1,8,3,8,365,8,8,1,9,1,9,1,9,1,10,1,10,3,10,372,8,10,1,10,1,10,
        1,11,1,11,3,11,378,8,11,1,11,1,11,1,11,1,11,3,11,384,8,11,1,11,1,
        11,1,11,3,11,389,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,398,
        8,11,10,11,12,11,401,9,11,1,11,1,11,1,11,3,11,406,8,11,1,12,1,12,
        3,12,410,8,12,1,12,1,12,3,12,414,8,12,1,12,3,12,417,8,12,1,13,1,
        13,3,13,421,8,13,1,13,1,13,1,13,1,13,3,13,427,8,13,1,13,1,13,1,13,
        3,13,432,8,13,1,13,1,13,1,13,1,13,1,13,5,13,439,8,13,10,13,12,13,
        442,9,13,1,13,1,13,5,13,446,8,13,10,13,12,13,449,9,13,1,13,1,13,
        1,13,3,13,454,8,13,1,13,1,13,3,13,458,8,13,1,14,1,14,3,14,462,8,
        14,1,14,5,14,465,8,14,10,14,12,14,468,9,14,1,15,4,15,471,8,15,11,
        15,12,15,472,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
        15,485,8,15,1,16,1,16,3,16,489,8,16,1,16,1,16,1,16,3,16,494,8,16,
        1,16,3,16,497,8,16,1,16,3,16,500,8,16,1,16,3,16,503,8,16,1,16,1,
        16,3,16,507,8,16,1,16,3,16,510,8,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,524,8,16,1,16,1,16,1,16,1,16,
        1,16,3,16,531,8,16,1,16,1,16,1,16,1,16,1,16,3,16,538,8,16,3,16,540,
        8,16,1,17,3,17,543,8,17,1,17,1,17,1,18,1,18,3,18,549,8,18,1,18,1,
        18,1,18,3,18,554,8,18,1,18,1,18,1,18,1,18,5,18,560,8,18,10,18,12,
        18,563,9,18,1,18,1,18,3,18,567,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,5,18,580,8,18,10,18,12,18,583,9,18,1,18,
        1,18,1,18,3,18,588,8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,596,8,
        19,10,19,12,19,599,9,19,1,19,1,19,3,19,603,8,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,3,19,613,8,19,1,19,1,19,5,19,617,8,19,10,
        19,12,19,620,9,19,1,19,3,19,623,8,19,1,19,1,19,1,19,3,19,628,8,19,
        3,19,630,8,19,1,20,1,20,1,20,1,20,1,21,1,21,3,21,638,8,21,1,21,1,
        21,1,21,1,21,3,21,644,8,21,1,21,1,21,1,21,3,21,649,8,21,1,21,1,21,
        1,21,1,21,1,21,3,21,656,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        5,21,665,8,21,10,21,12,21,668,9,21,3,21,670,8,21,3,21,672,8,21,1,
        21,1,21,1,21,1,21,1,21,3,21,679,8,21,1,21,1,21,3,21,683,8,21,1,21,
        1,21,1,21,1,21,1,21,3,21,690,8,21,1,21,1,21,4,21,694,8,21,11,21,
        12,21,695,1,21,1,21,1,22,1,22,3,22,702,8,22,1,22,1,22,1,22,1,22,
        3,22,708,8,22,1,22,1,22,1,22,3,22,713,8,22,1,22,1,22,1,22,1,22,1,
        22,5,22,720,8,22,10,22,12,22,723,9,22,1,22,1,22,3,22,727,8,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,738,8,23,1,23,1,
        23,1,23,3,23,743,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,752,
        8,23,10,23,12,23,755,9,23,1,23,1,23,3,23,759,8,23,1,24,1,24,3,24,
        763,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,5,24,777,8,24,10,24,12,24,780,9,24,1,25,1,25,1,25,1,25,1,25,
        5,25,787,8,25,10,25,12,25,790,9,25,1,25,1,25,3,25,794,8,25,1,26,
        1,26,1,26,1,26,1,26,1,26,3,26,802,8,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,5,27,812,8,27,10,27,12,27,815,9,27,1,27,1,27,3,27,
        819,8,27,1,27,1,27,1,27,1,27,1,27,1,28,3,28,827,8,28,1,28,1,28,1,
        28,1,28,1,28,3,28,834,8,28,1,28,3,28,837,8,28,1,29,3,29,840,8,29,
        1,29,1,29,1,29,1,29,1,29,3,29,847,8,29,1,29,3,29,850,8,29,1,29,3,
        29,853,8,29,1,29,3,29,856,8,29,1,30,1,30,3,30,860,8,30,1,30,1,30,
        1,31,1,31,1,31,1,31,3,31,868,8,31,1,31,1,31,1,31,3,31,873,8,31,1,
        31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,883,8,32,1,32,1,32,1,
        32,3,32,888,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,897,8,32,
        1,32,1,32,1,32,5,32,902,8,32,10,32,12,32,905,9,32,1,32,3,32,908,
        8,32,1,32,1,32,3,32,912,8,32,1,32,3,32,915,8,32,1,32,1,32,1,32,1,
        32,5,32,921,8,32,10,32,12,32,924,9,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,3,32,936,8,32,1,32,3,32,939,8,32,1,32,1,32,
        1,32,1,32,1,32,1,32,3,32,947,8,32,1,32,1,32,1,32,1,32,1,32,4,32,
        954,8,32,11,32,12,32,955,1,32,1,32,3,32,960,8,32,1,32,1,32,1,32,
        3,32,965,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,3,32,992,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
        1001,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
        1013,8,32,1,32,1,32,1,32,3,32,1018,8,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,3,32,1030,8,32,1,32,1,32,1,32,1,32,3,32,
        1036,8,32,1,32,1,32,1,32,1,32,1,32,3,32,1043,8,32,1,32,1,32,3,32,
        1047,8,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1055,8,32,10,32,12,
        32,1058,9,32,3,32,1060,8,32,1,32,1,32,1,32,1,32,3,32,1066,8,32,1,
        32,1,32,1,32,1,32,3,32,1072,8,32,1,32,1,32,1,32,1,32,1,32,5,32,1079,
        8,32,10,32,12,32,1082,9,32,3,32,1084,8,32,1,32,1,32,3,32,1088,8,
        32,5,32,1090,8,32,10,32,12,32,1093,9,32,1,33,1,33,1,33,1,33,1,33,
        1,33,3,33,1101,8,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,5,35,
        1111,8,35,10,35,12,35,1114,9,35,1,35,1,35,1,36,1,36,1,36,1,36,5,
        36,1122,8,36,10,36,12,36,1125,9,36,1,37,3,37,1128,8,37,1,37,1,37,
        1,37,1,37,1,37,3,37,1135,8,37,1,37,1,37,1,37,1,37,3,37,1141,8,37,
        1,37,1,37,1,37,3,37,1146,8,37,1,37,1,37,1,37,1,37,5,37,1152,8,37,
        10,37,12,37,1155,9,37,1,37,1,37,3,37,1159,8,37,1,37,1,37,3,37,1163,
        8,37,1,37,3,37,1166,8,37,1,37,1,37,3,37,1170,8,37,1,37,3,37,1173,
        8,37,1,38,1,38,1,38,1,38,5,38,1179,8,38,10,38,12,38,1182,9,38,1,
        39,1,39,1,39,1,39,1,39,1,39,5,39,1190,8,39,10,39,12,39,1193,9,39,
        1,39,1,39,1,39,3,39,1198,8,39,3,39,1200,8,39,1,39,1,39,1,39,1,39,
        1,39,1,39,3,39,1208,8,39,1,39,1,39,1,39,1,39,1,39,3,39,1215,8,39,
        1,39,1,39,1,39,5,39,1220,8,39,10,39,12,39,1223,9,39,1,39,1,39,3,
        39,1227,8,39,3,39,1229,8,39,1,40,1,40,1,40,1,40,3,40,1235,8,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1244,8,40,1,41,1,41,1,41,3,
        41,1249,8,41,1,42,1,42,1,42,1,42,1,42,3,42,1256,8,42,1,42,1,42,3,
        42,1260,8,42,3,42,1262,8,42,1,43,3,43,1265,8,43,1,43,1,43,1,43,1,
        43,5,43,1271,8,43,10,43,12,43,1274,9,43,1,43,3,43,1277,8,43,1,43,
        3,43,1280,8,43,1,44,1,44,1,44,1,44,3,44,1286,8,44,5,44,1288,8,44,
        10,44,12,44,1291,9,44,1,45,1,45,3,45,1295,8,45,1,45,1,45,1,45,5,
        45,1300,8,45,10,45,12,45,1303,9,45,1,45,1,45,1,45,1,45,5,45,1309,
        8,45,10,45,12,45,1312,9,45,1,45,3,45,1315,8,45,3,45,1317,8,45,1,
        45,1,45,3,45,1321,8,45,1,45,1,45,1,45,1,45,1,45,5,45,1328,8,45,10,
        45,12,45,1331,9,45,1,45,1,45,3,45,1335,8,45,3,45,1337,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,1348,8,45,10,45,12,
        45,1351,9,45,3,45,1353,8,45,1,45,3,45,1356,8,45,1,46,1,46,1,47,3,
        47,1361,8,47,1,47,1,47,3,47,1365,8,47,1,47,3,47,1368,8,47,1,48,3,
        48,1371,8,48,1,48,1,48,1,48,3,48,1376,8,48,1,48,1,48,3,48,1380,8,
        48,1,48,4,48,1383,8,48,11,48,12,48,1384,1,48,3,48,1388,8,48,1,48,
        3,48,1391,8,48,1,49,1,49,1,49,3,49,1396,8,49,1,49,1,49,3,49,1400,
        8,49,1,49,3,49,1403,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1410,8,49,
        1,49,1,49,1,49,3,49,1415,8,49,1,49,1,49,1,49,1,49,1,49,5,49,1422,
        8,49,10,49,12,49,1425,9,49,1,49,1,49,3,49,1429,8,49,1,49,3,49,1432,
        8,49,1,49,1,49,1,49,1,49,5,49,1438,8,49,10,49,12,49,1441,9,49,1,
        49,3,49,1444,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1452,8,49,1,
        49,3,49,1455,8,49,3,49,1457,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,3,50,1466,8,50,1,50,3,50,1469,8,50,3,50,1471,8,50,1,51,1,51,3,
        51,1475,8,51,1,51,1,51,3,51,1479,8,51,1,51,1,51,3,51,1483,8,51,1,
        51,3,51,1486,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1495,8,
        52,10,52,12,52,1498,9,52,1,52,1,52,3,52,1502,8,52,1,53,1,53,3,53,
        1506,8,53,1,53,1,53,3,53,1510,8,53,1,54,3,54,1513,8,54,1,54,1,54,
        1,54,3,54,1518,8,54,1,54,1,54,1,54,1,54,3,54,1524,8,54,1,54,1,54,
        1,54,1,54,1,54,3,54,1531,8,54,1,54,1,54,1,54,5,54,1536,8,54,10,54,
        12,54,1539,9,54,1,54,1,54,1,54,1,54,5,54,1545,8,54,10,54,12,54,1548,
        9,54,1,54,3,54,1551,8,54,3,54,1553,8,54,1,54,1,54,3,54,1557,8,54,
        1,54,3,54,1560,8,54,1,55,1,55,1,55,1,55,5,55,1566,8,55,10,55,12,
        55,1569,9,55,1,55,1,55,1,56,3,56,1574,8,56,1,56,1,56,1,56,3,56,1579,
        8,56,1,56,1,56,1,56,1,56,3,56,1585,8,56,1,56,1,56,1,56,1,56,1,56,
        3,56,1592,8,56,1,56,1,56,1,56,5,56,1597,8,56,10,56,12,56,1600,9,
        56,1,56,1,56,3,56,1604,8,56,1,56,3,56,1607,8,56,1,56,3,56,1610,8,
        56,1,56,3,56,1613,8,56,1,57,1,57,1,57,3,57,1618,8,57,1,57,1,57,1,
        57,3,57,1623,8,57,1,57,1,57,1,57,1,57,1,57,3,57,1630,8,57,1,58,1,
        58,3,58,1634,8,58,1,58,1,58,3,58,1638,8,58,1,59,1,59,1,59,1,59,1,
        59,1,59,1,60,1,60,3,60,1648,8,60,1,60,1,60,1,60,1,60,1,60,5,60,1655,
        8,60,10,60,12,60,1658,9,60,3,60,1660,8,60,1,60,1,60,1,60,1,60,1,
        60,5,60,1667,8,60,10,60,12,60,1670,9,60,1,60,3,60,1673,8,60,1,60,
        1,60,1,61,1,61,1,61,1,61,3,61,1681,8,61,1,61,1,61,1,61,1,61,1,61,
        5,61,1688,8,61,10,61,12,61,1691,9,61,3,61,1693,8,61,1,61,1,61,1,
        61,1,61,1,61,5,61,1700,8,61,10,61,12,61,1703,9,61,3,61,1705,8,61,
        1,61,3,61,1708,8,61,1,61,3,61,1711,8,61,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1721,8,62,3,62,1723,8,62,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,3,63,1732,8,63,1,64,1,64,1,64,1,64,1,64,5,64,1739,
        8,64,10,64,12,64,1742,9,64,1,64,3,64,1745,8,64,1,64,1,64,1,65,1,
        65,1,65,3,65,1752,8,65,1,65,1,65,1,65,5,65,1757,8,65,10,65,12,65,
        1760,9,65,1,65,3,65,1763,8,65,1,65,1,65,3,65,1767,8,65,1,66,1,66,
        1,66,1,66,1,66,5,66,1774,8,66,10,66,12,66,1777,9,66,1,66,3,66,1780,
        8,66,1,66,1,66,3,66,1784,8,66,1,66,1,66,1,66,3,66,1789,8,66,1,67,
        1,67,3,67,1793,8,67,1,67,1,67,1,67,5,67,1798,8,67,10,67,12,67,1801,
        9,67,1,68,1,68,1,68,1,68,1,68,5,68,1808,8,68,10,68,12,68,1811,9,
        68,1,69,1,69,1,69,1,69,3,69,1817,8,69,1,70,1,70,1,70,3,70,1822,8,
        70,1,70,3,70,1825,8,70,1,70,1,70,3,70,1829,8,70,1,71,1,71,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1843,8,72,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1855,8,73,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,3,74,1864,8,74,1,75,1,75,1,75,1,75,1,
        75,1,75,1,75,3,75,1873,8,75,1,75,1,75,3,75,1877,8,75,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,3,75,1887,8,75,1,75,3,75,1890,8,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1899,8,75,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,3,75,1908,8,75,1,75,3,75,1911,8,75,1,75,1,75,1,
        75,1,75,3,75,1917,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,3,75,1931,8,75,1,75,1,75,3,75,1935,8,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1946,8,75,1,75,1,75,1,
        75,3,75,1951,8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,4,
        78,1962,8,78,11,78,12,78,1963,1,79,1,79,1,79,4,79,1969,8,79,11,79,
        12,79,1970,1,80,1,80,1,80,1,80,1,81,1,81,3,81,1979,8,81,1,81,1,81,
        1,81,3,81,1984,8,81,5,81,1986,8,81,10,81,12,81,1989,9,81,1,82,1,
        82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,3,86,2001,8,86,1,87,1,
        87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,
        94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,
        1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,
        1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,1,111,
        1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,2060,8,112,
        1,112,2,440,472,1,64,113,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,0,29,3,0,58,58,69,69,82,82,2,0,47,
        47,66,66,1,0,133,134,2,0,146,146,171,171,1,0,8,9,2,0,59,59,141,141,
        2,0,56,56,104,104,2,0,58,58,82,82,5,0,25,25,72,72,81,81,122,122,
        126,126,4,0,84,84,132,132,138,138,145,145,2,0,7,7,12,13,1,0,14,17,
        1,0,18,21,4,0,77,77,97,97,99,99,118,118,3,0,25,25,72,72,126,126,
        5,0,52,54,104,104,172,173,186,186,188,189,2,0,29,29,62,62,3,0,76,
        76,96,96,125,125,3,0,128,128,154,154,179,179,2,0,5,5,106,106,1,0,
        176,177,2,0,34,34,60,60,2,0,151,151,162,162,2,0,159,159,166,166,
        2,0,160,160,167,168,2,0,161,161,163,163,2,0,8,10,102,102,2,0,185,
        185,188,188,2,0,25,123,125,180,2346,0,229,1,0,0,0,2,237,1,0,0,0,
        4,263,1,0,0,0,6,291,1,0,0,0,8,323,1,0,0,0,10,333,1,0,0,0,12,341,
        1,0,0,0,14,351,1,0,0,0,16,355,1,0,0,0,18,366,1,0,0,0,20,369,1,0,
        0,0,22,375,1,0,0,0,24,409,1,0,0,0,26,418,1,0,0,0,28,459,1,0,0,0,
        30,470,1,0,0,0,32,488,1,0,0,0,34,542,1,0,0,0,36,548,1,0,0,0,38,589,
        1,0,0,0,40,631,1,0,0,0,42,635,1,0,0,0,44,699,1,0,0,0,46,731,1,0,
        0,0,48,760,1,0,0,0,50,781,1,0,0,0,52,795,1,0,0,0,54,806,1,0,0,0,
        56,826,1,0,0,0,58,839,1,0,0,0,60,857,1,0,0,0,62,863,1,0,0,0,64,964,
        1,0,0,0,66,1094,1,0,0,0,68,1104,1,0,0,0,70,1106,1,0,0,0,72,1117,
        1,0,0,0,74,1127,1,0,0,0,76,1174,1,0,0,0,78,1183,1,0,0,0,80,1230,
        1,0,0,0,82,1248,1,0,0,0,84,1250,1,0,0,0,86,1264,1,0,0,0,88,1281,
        1,0,0,0,90,1355,1,0,0,0,92,1357,1,0,0,0,94,1360,1,0,0,0,96,1370,
        1,0,0,0,98,1456,1,0,0,0,100,1470,1,0,0,0,102,1485,1,0,0,0,104,1501,
        1,0,0,0,106,1509,1,0,0,0,108,1512,1,0,0,0,110,1561,1,0,0,0,112,1573,
        1,0,0,0,114,1617,1,0,0,0,116,1631,1,0,0,0,118,1639,1,0,0,0,120,1645,
        1,0,0,0,122,1676,1,0,0,0,124,1712,1,0,0,0,126,1724,1,0,0,0,128,1733,
        1,0,0,0,130,1748,1,0,0,0,132,1768,1,0,0,0,134,1790,1,0,0,0,136,1802,
        1,0,0,0,138,1812,1,0,0,0,140,1818,1,0,0,0,142,1830,1,0,0,0,144,1842,
        1,0,0,0,146,1854,1,0,0,0,148,1863,1,0,0,0,150,1950,1,0,0,0,152,1952,
        1,0,0,0,154,1955,1,0,0,0,156,1958,1,0,0,0,158,1965,1,0,0,0,160,1972,
        1,0,0,0,162,1976,1,0,0,0,164,1990,1,0,0,0,166,1992,1,0,0,0,168,1994,
        1,0,0,0,170,1996,1,0,0,0,172,2000,1,0,0,0,174,2002,1,0,0,0,176,2004,
        1,0,0,0,178,2006,1,0,0,0,180,2008,1,0,0,0,182,2010,1,0,0,0,184,2012,
        1,0,0,0,186,2014,1,0,0,0,188,2016,1,0,0,0,190,2018,1,0,0,0,192,2020,
        1,0,0,0,194,2022,1,0,0,0,196,2024,1,0,0,0,198,2026,1,0,0,0,200,2028,
        1,0,0,0,202,2030,1,0,0,0,204,2032,1,0,0,0,206,2034,1,0,0,0,208,2036,
        1,0,0,0,210,2038,1,0,0,0,212,2040,1,0,0,0,214,2042,1,0,0,0,216,2044,
        1,0,0,0,218,2046,1,0,0,0,220,2048,1,0,0,0,222,2050,1,0,0,0,224,2059,
        1,0,0,0,226,228,3,2,1,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,
        1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,
        5,0,0,1,233,1,1,0,0,0,234,236,5,1,0,0,235,234,1,0,0,0,236,239,1,
        0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,1,
        0,0,0,240,249,3,4,2,0,241,243,5,1,0,0,242,241,1,0,0,0,243,244,1,
        0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,248,3,
        4,2,0,247,242,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,
        0,0,0,250,255,1,0,0,0,251,249,1,0,0,0,252,254,5,1,0,0,253,252,1,
        0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,3,1,0,
        0,0,257,255,1,0,0,0,258,261,5,71,0,0,259,260,5,114,0,0,260,262,5,
        111,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,258,
        1,0,0,0,263,264,1,0,0,0,264,289,1,0,0,0,265,290,3,6,3,0,266,290,
        3,8,4,0,267,290,3,10,5,0,268,290,3,12,6,0,269,290,3,14,7,0,270,290,
        3,22,11,0,271,290,3,26,13,0,272,290,3,42,21,0,273,290,3,44,22,0,
        274,290,3,46,23,0,275,290,3,56,28,0,276,290,3,58,29,0,277,290,3,
        60,30,0,278,290,3,62,31,0,279,290,3,74,37,0,280,290,3,80,40,0,281,
        290,3,84,42,0,282,290,3,20,10,0,283,290,3,16,8,0,284,290,3,18,9,
        0,285,290,3,86,43,0,286,290,3,108,54,0,287,290,3,112,56,0,288,290,
        3,116,58,0,289,265,1,0,0,0,289,266,1,0,0,0,289,267,1,0,0,0,289,268,
        1,0,0,0,289,269,1,0,0,0,289,270,1,0,0,0,289,271,1,0,0,0,289,272,
        1,0,0,0,289,273,1,0,0,0,289,274,1,0,0,0,289,275,1,0,0,0,289,276,
        1,0,0,0,289,277,1,0,0,0,289,278,1,0,0,0,289,279,1,0,0,0,289,280,
        1,0,0,0,289,281,1,0,0,0,289,282,1,0,0,0,289,283,1,0,0,0,289,284,
        1,0,0,0,289,285,1,0,0,0,289,286,1,0,0,0,289,287,1,0,0,0,289,288,
        1,0,0,0,290,5,1,0,0,0,291,292,5,30,0,0,292,296,5,132,0,0,293,294,
        3,182,91,0,294,295,5,2,0,0,295,297,1,0,0,0,296,293,1,0,0,0,296,297,
        1,0,0,0,297,298,1,0,0,0,298,321,3,184,92,0,299,309,5,121,0,0,300,
        301,5,136,0,0,301,310,3,184,92,0,302,304,5,46,0,0,303,302,1,0,0,
        0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,3,188,94,0,306,307,5,136,
        0,0,307,308,3,188,94,0,308,310,1,0,0,0,309,300,1,0,0,0,309,303,1,
        0,0,0,310,322,1,0,0,0,311,313,5,27,0,0,312,314,5,46,0,0,313,312,
        1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,322,3,28,14,0,316,318,
        5,63,0,0,317,319,5,46,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,320,
        1,0,0,0,320,322,3,188,94,0,321,299,1,0,0,0,321,311,1,0,0,0,321,316,
        1,0,0,0,322,7,1,0,0,0,323,331,5,31,0,0,324,332,3,182,91,0,325,326,
        3,182,91,0,326,327,5,2,0,0,327,329,1,0,0,0,328,325,1,0,0,0,328,329,
        1,0,0,0,329,330,1,0,0,0,330,332,3,186,93,0,331,324,1,0,0,0,331,328,
        1,0,0,0,331,332,1,0,0,0,332,9,1,0,0,0,333,335,5,35,0,0,334,336,5,
        55,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,3,
        64,32,0,338,339,5,33,0,0,339,340,3,182,91,0,340,11,1,0,0,0,341,343,
        5,38,0,0,342,344,7,0,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,349,
        1,0,0,0,345,347,5,137,0,0,346,348,3,208,104,0,347,346,1,0,0,0,347,
        348,1,0,0,0,348,350,1,0,0,0,349,345,1,0,0,0,349,350,1,0,0,0,350,
        13,1,0,0,0,351,353,7,1,0,0,352,354,5,137,0,0,353,352,1,0,0,0,353,
        354,1,0,0,0,354,15,1,0,0,0,355,357,5,126,0,0,356,358,5,137,0,0,357,
        356,1,0,0,0,357,358,1,0,0,0,358,364,1,0,0,0,359,361,5,136,0,0,360,
        362,5,129,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,
        365,3,204,102,0,364,359,1,0,0,0,364,365,1,0,0,0,365,17,1,0,0,0,366,
        367,5,129,0,0,367,368,3,204,102,0,368,19,1,0,0,0,369,371,5,120,0,
        0,370,372,5,129,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,
        0,0,373,374,3,204,102,0,374,21,1,0,0,0,375,377,5,50,0,0,376,378,
        5,140,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,383,
        5,84,0,0,380,381,5,80,0,0,381,382,5,102,0,0,382,384,5,70,0,0,383,
        380,1,0,0,0,383,384,1,0,0,0,384,388,1,0,0,0,385,386,3,182,91,0,386,
        387,5,2,0,0,387,389,1,0,0,0,388,385,1,0,0,0,388,389,1,0,0,0,389,
        390,1,0,0,0,390,391,3,194,97,0,391,392,5,107,0,0,392,393,3,184,92,
        0,393,394,5,3,0,0,394,399,3,24,12,0,395,396,5,5,0,0,396,398,3,24,
        12,0,397,395,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,
        0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,405,5,4,0,0,403,404,5,148,
        0,0,404,406,3,64,32,0,405,403,1,0,0,0,405,406,1,0,0,0,406,23,1,0,
        0,0,407,410,3,188,94,0,408,410,3,64,32,0,409,407,1,0,0,0,409,408,
        1,0,0,0,410,413,1,0,0,0,411,412,5,45,0,0,412,414,3,190,95,0,413,
        411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,3,142,71,0,416,
        415,1,0,0,0,416,417,1,0,0,0,417,25,1,0,0,0,418,420,5,50,0,0,419,
        421,7,2,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,
        426,5,132,0,0,423,424,5,80,0,0,424,425,5,102,0,0,425,427,5,70,0,
        0,426,423,1,0,0,0,426,427,1,0,0,0,427,431,1,0,0,0,428,429,3,182,
        91,0,429,430,5,2,0,0,430,432,1,0,0,0,431,428,1,0,0,0,431,432,1,0,
        0,0,432,433,1,0,0,0,433,457,3,184,92,0,434,435,5,3,0,0,435,440,3,
        28,14,0,436,437,5,5,0,0,437,439,3,28,14,0,438,436,1,0,0,0,439,442,
        1,0,0,0,440,441,1,0,0,0,440,438,1,0,0,0,441,447,1,0,0,0,442,440,
        1,0,0,0,443,444,5,5,0,0,444,446,3,36,18,0,445,443,1,0,0,0,446,449,
        1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,447,
        1,0,0,0,450,453,5,4,0,0,451,452,5,150,0,0,452,454,5,185,0,0,453,
        451,1,0,0,0,453,454,1,0,0,0,454,458,1,0,0,0,455,456,5,33,0,0,456,
        458,3,86,43,0,457,434,1,0,0,0,457,455,1,0,0,0,458,27,1,0,0,0,459,
        461,3,188,94,0,460,462,3,30,15,0,461,460,1,0,0,0,461,462,1,0,0,0,
        462,466,1,0,0,0,463,465,3,32,16,0,464,463,1,0,0,0,465,468,1,0,0,
        0,466,464,1,0,0,0,466,467,1,0,0,0,467,29,1,0,0,0,468,466,1,0,0,0,
        469,471,3,178,89,0,470,469,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,
        0,472,470,1,0,0,0,473,484,1,0,0,0,474,475,5,3,0,0,475,476,3,34,17,
        0,476,477,5,4,0,0,477,485,1,0,0,0,478,479,5,3,0,0,479,480,3,34,17,
        0,480,481,5,5,0,0,481,482,3,34,17,0,482,483,5,4,0,0,483,485,1,0,
        0,0,484,474,1,0,0,0,484,478,1,0,0,0,484,485,1,0,0,0,485,31,1,0,0,
        0,486,487,5,49,0,0,487,489,3,178,89,0,488,486,1,0,0,0,488,489,1,
        0,0,0,489,539,1,0,0,0,490,491,5,113,0,0,491,493,5,95,0,0,492,494,
        3,142,71,0,493,492,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,497,
        3,40,20,0,496,495,1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,500,
        5,36,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,540,1,0,0,0,501,503,
        5,102,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,507,
        5,104,0,0,505,507,5,140,0,0,506,502,1,0,0,0,506,505,1,0,0,0,507,
        509,1,0,0,0,508,510,3,40,20,0,509,508,1,0,0,0,509,510,1,0,0,0,510,
        540,1,0,0,0,511,512,5,44,0,0,512,513,5,3,0,0,513,514,3,64,32,0,514,
        515,5,4,0,0,515,540,1,0,0,0,516,523,5,56,0,0,517,524,3,34,17,0,518,
        524,3,68,34,0,519,520,5,3,0,0,520,521,3,64,32,0,521,522,5,4,0,0,
        522,524,1,0,0,0,523,517,1,0,0,0,523,518,1,0,0,0,523,519,1,0,0,0,
        524,540,1,0,0,0,525,526,5,45,0,0,526,540,3,190,95,0,527,540,3,38,
        19,0,528,529,5,169,0,0,529,531,5,170,0,0,530,528,1,0,0,0,530,531,
        1,0,0,0,531,532,1,0,0,0,532,533,5,33,0,0,533,534,5,3,0,0,534,535,
        3,64,32,0,535,537,5,4,0,0,536,538,7,3,0,0,537,536,1,0,0,0,537,538,
        1,0,0,0,538,540,1,0,0,0,539,490,1,0,0,0,539,506,1,0,0,0,539,511,
        1,0,0,0,539,516,1,0,0,0,539,525,1,0,0,0,539,527,1,0,0,0,539,530,
        1,0,0,0,540,33,1,0,0,0,541,543,7,4,0,0,542,541,1,0,0,0,542,543,1,
        0,0,0,543,544,1,0,0,0,544,545,5,186,0,0,545,35,1,0,0,0,546,547,5,
        49,0,0,547,549,3,178,89,0,548,546,1,0,0,0,548,549,1,0,0,0,549,587,
        1,0,0,0,550,551,5,113,0,0,551,554,5,95,0,0,552,554,5,140,0,0,553,
        550,1,0,0,0,553,552,1,0,0,0,554,555,1,0,0,0,555,556,5,3,0,0,556,
        561,3,24,12,0,557,558,5,5,0,0,558,560,3,24,12,0,559,557,1,0,0,0,
        560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,
        563,561,1,0,0,0,564,566,5,4,0,0,565,567,3,40,20,0,566,565,1,0,0,
        0,566,567,1,0,0,0,567,588,1,0,0,0,568,569,5,44,0,0,569,570,5,3,0,
        0,570,571,3,64,32,0,571,572,5,4,0,0,572,588,1,0,0,0,573,574,5,74,
        0,0,574,575,5,95,0,0,575,576,5,3,0,0,576,581,3,188,94,0,577,578,
        5,5,0,0,578,580,3,188,94,0,579,577,1,0,0,0,580,583,1,0,0,0,581,579,
        1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,0,0,0,584,585,
        5,4,0,0,585,586,3,38,19,0,586,588,1,0,0,0,587,553,1,0,0,0,587,568,
        1,0,0,0,587,573,1,0,0,0,588,37,1,0,0,0,589,590,5,117,0,0,590,602,
        3,192,96,0,591,592,5,3,0,0,592,597,3,188,94,0,593,594,5,5,0,0,594,
        596,3,188,94,0,595,593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,
        598,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,601,5,4,0,0,601,
        603,1,0,0,0,602,591,1,0,0,0,602,603,1,0,0,0,603,618,1,0,0,0,604,
        605,5,107,0,0,605,612,7,5,0,0,606,607,5,131,0,0,607,613,7,6,0,0,
        608,613,5,41,0,0,609,613,5,123,0,0,610,611,5,101,0,0,611,613,5,26,
        0,0,612,606,1,0,0,0,612,608,1,0,0,0,612,609,1,0,0,0,612,610,1,0,
        0,0,613,617,1,0,0,0,614,615,5,99,0,0,615,617,3,178,89,0,616,604,
        1,0,0,0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,
        1,0,0,0,619,629,1,0,0,0,620,618,1,0,0,0,621,623,5,102,0,0,622,621,
        1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,627,5,57,0,0,625,626,
        5,86,0,0,626,628,7,7,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,
        1,0,0,0,629,622,1,0,0,0,629,630,1,0,0,0,630,39,1,0,0,0,631,632,5,
        107,0,0,632,633,5,48,0,0,633,634,7,8,0,0,634,41,1,0,0,0,635,637,
        5,50,0,0,636,638,7,2,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,
        1,0,0,0,639,643,5,138,0,0,640,641,5,80,0,0,641,642,5,102,0,0,642,
        644,5,70,0,0,643,640,1,0,0,0,643,644,1,0,0,0,644,648,1,0,0,0,645,
        646,3,182,91,0,646,647,5,2,0,0,647,649,1,0,0,0,648,645,1,0,0,0,648,
        649,1,0,0,0,649,650,1,0,0,0,650,655,3,196,98,0,651,656,5,37,0,0,
        652,656,5,28,0,0,653,654,5,89,0,0,654,656,5,105,0,0,655,651,1,0,
        0,0,655,652,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,671,1,0,
        0,0,657,672,5,59,0,0,658,672,5,88,0,0,659,669,5,141,0,0,660,661,
        5,105,0,0,661,666,3,188,94,0,662,663,5,5,0,0,663,665,3,188,94,0,
        664,662,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,
        667,670,1,0,0,0,668,666,1,0,0,0,669,660,1,0,0,0,669,670,1,0,0,0,
        670,672,1,0,0,0,671,657,1,0,0,0,671,658,1,0,0,0,671,659,1,0,0,0,
        672,673,1,0,0,0,673,674,5,107,0,0,674,678,3,184,92,0,675,676,5,73,
        0,0,676,677,5,64,0,0,677,679,5,127,0,0,678,675,1,0,0,0,678,679,1,
        0,0,0,679,682,1,0,0,0,680,681,5,147,0,0,681,683,3,64,32,0,682,680,
        1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,693,5,38,0,0,685,690,
        3,108,54,0,686,690,3,74,37,0,687,690,3,56,28,0,688,690,3,86,43,0,
        689,685,1,0,0,0,689,686,1,0,0,0,689,687,1,0,0,0,689,688,1,0,0,0,
        690,691,1,0,0,0,691,692,5,1,0,0,692,694,1,0,0,0,693,689,1,0,0,0,
        694,695,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,
        697,698,5,66,0,0,698,43,1,0,0,0,699,701,5,50,0,0,700,702,7,2,0,0,
        701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,707,5,145,0,
        0,704,705,5,80,0,0,705,706,5,102,0,0,706,708,5,70,0,0,707,704,1,
        0,0,0,707,708,1,0,0,0,708,712,1,0,0,0,709,710,3,182,91,0,710,711,
        5,2,0,0,711,713,1,0,0,0,712,709,1,0,0,0,712,713,1,0,0,0,713,714,
        1,0,0,0,714,726,3,198,99,0,715,716,5,3,0,0,716,721,3,188,94,0,717,
        718,5,5,0,0,718,720,3,188,94,0,719,717,1,0,0,0,720,723,1,0,0,0,721,
        719,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,721,1,0,0,0,724,
        725,5,4,0,0,725,727,1,0,0,0,726,715,1,0,0,0,726,727,1,0,0,0,727,
        728,1,0,0,0,728,729,5,33,0,0,729,730,3,86,43,0,730,45,1,0,0,0,731,
        732,5,50,0,0,732,733,5,146,0,0,733,737,5,132,0,0,734,735,5,80,0,
        0,735,736,5,102,0,0,736,738,5,70,0,0,737,734,1,0,0,0,737,738,1,0,
        0,0,738,742,1,0,0,0,739,740,3,182,91,0,740,741,5,2,0,0,741,743,1,
        0,0,0,742,739,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,3,
        184,92,0,745,746,5,142,0,0,746,758,3,200,100,0,747,748,5,3,0,0,748,
        753,3,172,86,0,749,750,5,5,0,0,750,752,3,172,86,0,751,749,1,0,0,
        0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,
        0,755,753,1,0,0,0,756,757,5,4,0,0,757,759,1,0,0,0,758,747,1,0,0,
        0,758,759,1,0,0,0,759,47,1,0,0,0,760,762,5,149,0,0,761,763,5,116,
        0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,3,50,
        25,0,765,766,5,33,0,0,766,767,5,3,0,0,767,768,3,86,43,0,768,778,
        5,4,0,0,769,770,5,5,0,0,770,771,3,50,25,0,771,772,5,33,0,0,772,773,
        5,3,0,0,773,774,3,86,43,0,774,775,5,4,0,0,775,777,1,0,0,0,776,769,
        1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,49,1,
        0,0,0,780,778,1,0,0,0,781,793,3,184,92,0,782,783,5,3,0,0,783,788,
        3,188,94,0,784,785,5,5,0,0,785,787,3,188,94,0,786,784,1,0,0,0,787,
        790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,
        788,1,0,0,0,791,792,5,4,0,0,792,794,1,0,0,0,793,782,1,0,0,0,793,
        794,1,0,0,0,794,51,1,0,0,0,795,796,3,50,25,0,796,797,5,33,0,0,797,
        798,5,3,0,0,798,799,3,164,82,0,799,801,5,139,0,0,800,802,5,29,0,
        0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,3,166,
        83,0,804,805,5,4,0,0,805,53,1,0,0,0,806,818,3,184,92,0,807,808,5,
        3,0,0,808,813,3,188,94,0,809,810,5,5,0,0,810,812,3,188,94,0,811,
        809,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,814,1,0,0,0,814,
        816,1,0,0,0,815,813,1,0,0,0,816,817,5,4,0,0,817,819,1,0,0,0,818,
        807,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,821,5,33,0,0,821,
        822,5,3,0,0,822,823,3,86,43,0,823,824,5,4,0,0,824,55,1,0,0,0,825,
        827,3,48,24,0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,
        829,5,59,0,0,829,830,5,75,0,0,830,833,3,114,57,0,831,832,5,148,0,
        0,832,834,3,64,32,0,833,831,1,0,0,0,833,834,1,0,0,0,834,836,1,0,
        0,0,835,837,3,76,38,0,836,835,1,0,0,0,836,837,1,0,0,0,837,57,1,0,
        0,0,838,840,3,48,24,0,839,838,1,0,0,0,839,840,1,0,0,0,840,841,1,
        0,0,0,841,842,5,59,0,0,842,843,5,75,0,0,843,846,3,114,57,0,844,845,
        5,148,0,0,845,847,3,64,32,0,846,844,1,0,0,0,846,847,1,0,0,0,847,
        849,1,0,0,0,848,850,3,76,38,0,849,848,1,0,0,0,849,850,1,0,0,0,850,
        855,1,0,0,0,851,853,3,136,68,0,852,851,1,0,0,0,852,853,1,0,0,0,853,
        854,1,0,0,0,854,856,3,138,69,0,855,852,1,0,0,0,855,856,1,0,0,0,856,
        59,1,0,0,0,857,859,5,61,0,0,858,860,5,55,0,0,859,858,1,0,0,0,859,
        860,1,0,0,0,860,861,1,0,0,0,861,862,3,182,91,0,862,61,1,0,0,0,863,
        864,5,63,0,0,864,867,7,9,0,0,865,866,5,80,0,0,866,868,5,70,0,0,867,
        865,1,0,0,0,867,868,1,0,0,0,868,872,1,0,0,0,869,870,3,182,91,0,870,
        871,5,2,0,0,871,873,1,0,0,0,872,869,1,0,0,0,872,873,1,0,0,0,873,
        874,1,0,0,0,874,875,3,224,112,0,875,63,1,0,0,0,876,877,6,32,-1,0,
        877,965,3,68,34,0,878,965,5,187,0,0,879,880,3,182,91,0,880,881,5,
        2,0,0,881,883,1,0,0,0,882,879,1,0,0,0,882,883,1,0,0,0,883,884,1,
        0,0,0,884,885,3,184,92,0,885,886,5,2,0,0,886,888,1,0,0,0,887,882,
        1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,965,3,188,94,0,890,891,
        3,168,84,0,891,892,3,64,32,21,892,965,1,0,0,0,893,894,3,180,90,0,
        894,907,5,3,0,0,895,897,5,62,0,0,896,895,1,0,0,0,896,897,1,0,0,0,
        897,898,1,0,0,0,898,903,3,64,32,0,899,900,5,5,0,0,900,902,3,64,32,
        0,901,899,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,
        0,904,908,1,0,0,0,905,903,1,0,0,0,906,908,5,7,0,0,907,896,1,0,0,
        0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,911,5,4,0,
        0,910,912,3,118,59,0,911,910,1,0,0,0,911,912,1,0,0,0,912,914,1,0,
        0,0,913,915,3,122,61,0,914,913,1,0,0,0,914,915,1,0,0,0,915,965,1,
        0,0,0,916,917,5,3,0,0,917,922,3,64,32,0,918,919,5,5,0,0,919,921,
        3,64,32,0,920,918,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,922,923,
        1,0,0,0,923,925,1,0,0,0,924,922,1,0,0,0,925,926,5,4,0,0,926,965,
        1,0,0,0,927,928,5,43,0,0,928,929,5,3,0,0,929,930,3,64,32,0,930,931,
        5,33,0,0,931,932,3,30,15,0,932,933,5,4,0,0,933,965,1,0,0,0,934,936,
        5,102,0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,939,
        5,70,0,0,938,935,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,941,
        5,3,0,0,941,942,3,86,43,0,942,943,5,4,0,0,943,965,1,0,0,0,944,946,
        5,42,0,0,945,947,3,64,32,0,946,945,1,0,0,0,946,947,1,0,0,0,947,953,
        1,0,0,0,948,949,5,147,0,0,949,950,3,64,32,0,950,951,5,135,0,0,951,
        952,3,64,32,0,952,954,1,0,0,0,953,948,1,0,0,0,954,955,1,0,0,0,955,
        953,1,0,0,0,955,956,1,0,0,0,956,959,1,0,0,0,957,958,5,65,0,0,958,
        960,3,64,32,0,959,957,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,
        962,5,66,0,0,962,965,1,0,0,0,963,965,3,66,33,0,964,876,1,0,0,0,964,
        878,1,0,0,0,964,887,1,0,0,0,964,890,1,0,0,0,964,893,1,0,0,0,964,
        916,1,0,0,0,964,927,1,0,0,0,964,938,1,0,0,0,964,944,1,0,0,0,964,
        963,1,0,0,0,965,1091,1,0,0,0,966,967,10,20,0,0,967,968,5,11,0,0,
        968,1090,3,64,32,21,969,970,10,19,0,0,970,971,7,10,0,0,971,1090,
        3,64,32,20,972,973,10,18,0,0,973,974,7,4,0,0,974,1090,3,64,32,19,
        975,976,10,17,0,0,976,977,7,11,0,0,977,1090,3,64,32,18,978,979,10,
        16,0,0,979,980,7,12,0,0,980,1090,3,64,32,17,981,1000,10,15,0,0,982,
        1001,5,6,0,0,983,1001,5,22,0,0,984,1001,5,23,0,0,985,1001,5,24,0,
        0,986,1001,5,92,0,0,987,988,5,92,0,0,988,1001,5,102,0,0,989,991,
        5,92,0,0,990,992,5,102,0,0,991,990,1,0,0,0,991,992,1,0,0,0,992,993,
        1,0,0,0,993,994,5,62,0,0,994,1001,5,75,0,0,995,1001,5,83,0,0,996,
        1001,5,97,0,0,997,1001,5,77,0,0,998,1001,5,99,0,0,999,1001,5,118,
        0,0,1000,982,1,0,0,0,1000,983,1,0,0,0,1000,984,1,0,0,0,1000,985,
        1,0,0,0,1000,986,1,0,0,0,1000,987,1,0,0,0,1000,989,1,0,0,0,1000,
        995,1,0,0,0,1000,996,1,0,0,0,1000,997,1,0,0,0,1000,998,1,0,0,0,1000,
        999,1,0,0,0,1001,1002,1,0,0,0,1002,1090,3,64,32,16,1003,1004,10,
        14,0,0,1004,1005,5,32,0,0,1005,1090,3,64,32,15,1006,1007,10,13,0,
        0,1007,1008,5,108,0,0,1008,1090,3,64,32,14,1009,1010,10,6,0,0,1010,
        1012,5,92,0,0,1011,1013,5,102,0,0,1012,1011,1,0,0,0,1012,1013,1,
        0,0,0,1013,1014,1,0,0,0,1014,1090,3,64,32,7,1015,1017,10,5,0,0,1016,
        1018,5,102,0,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,
        0,0,1019,1020,5,39,0,0,1020,1021,3,64,32,0,1021,1022,5,32,0,0,1022,
        1023,3,64,32,6,1023,1090,1,0,0,0,1024,1025,10,9,0,0,1025,1026,5,
        45,0,0,1026,1090,3,190,95,0,1027,1029,10,8,0,0,1028,1030,5,102,0,
        0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1032,
        7,13,0,0,1032,1035,3,64,32,0,1033,1034,5,67,0,0,1034,1036,3,64,32,
        0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1090,1,0,0,0,1037,1042,
        10,7,0,0,1038,1043,5,93,0,0,1039,1043,5,103,0,0,1040,1041,5,102,
        0,0,1041,1043,5,104,0,0,1042,1038,1,0,0,0,1042,1039,1,0,0,0,1042,
        1040,1,0,0,0,1043,1090,1,0,0,0,1044,1046,10,4,0,0,1045,1047,5,102,
        0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1087,
        5,83,0,0,1049,1059,5,3,0,0,1050,1060,3,86,43,0,1051,1056,3,64,32,
        0,1052,1053,5,5,0,0,1053,1055,3,64,32,0,1054,1052,1,0,0,0,1055,1058,
        1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,1060,1,0,0,0,1058,
        1056,1,0,0,0,1059,1050,1,0,0,0,1059,1051,1,0,0,0,1059,1060,1,0,0,
        0,1060,1061,1,0,0,0,1061,1088,5,4,0,0,1062,1063,3,182,91,0,1063,
        1064,5,2,0,0,1064,1066,1,0,0,0,1065,1062,1,0,0,0,1065,1066,1,0,0,
        0,1066,1067,1,0,0,0,1067,1088,3,184,92,0,1068,1069,3,182,91,0,1069,
        1070,5,2,0,0,1070,1072,1,0,0,0,1071,1068,1,0,0,0,1071,1072,1,0,0,
        0,1072,1073,1,0,0,0,1073,1074,3,222,111,0,1074,1083,5,3,0,0,1075,
        1080,3,64,32,0,1076,1077,5,5,0,0,1077,1079,3,64,32,0,1078,1076,1,
        0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,
        1084,1,0,0,0,1082,1080,1,0,0,0,1083,1075,1,0,0,0,1083,1084,1,0,0,
        0,1084,1085,1,0,0,0,1085,1086,5,4,0,0,1086,1088,1,0,0,0,1087,1049,
        1,0,0,0,1087,1065,1,0,0,0,1087,1071,1,0,0,0,1088,1090,1,0,0,0,1089,
        966,1,0,0,0,1089,969,1,0,0,0,1089,972,1,0,0,0,1089,975,1,0,0,0,1089,
        978,1,0,0,0,1089,981,1,0,0,0,1089,1003,1,0,0,0,1089,1006,1,0,0,0,
        1089,1009,1,0,0,0,1089,1015,1,0,0,0,1089,1024,1,0,0,0,1089,1027,
        1,0,0,0,1089,1037,1,0,0,0,1089,1044,1,0,0,0,1090,1093,1,0,0,0,1091,
        1089,1,0,0,0,1091,1092,1,0,0,0,1092,65,1,0,0,0,1093,1091,1,0,0,0,
        1094,1095,5,115,0,0,1095,1100,5,3,0,0,1096,1101,5,81,0,0,1097,1098,
        7,14,0,0,1098,1099,5,5,0,0,1099,1101,3,170,85,0,1100,1096,1,0,0,
        0,1100,1097,1,0,0,0,1101,1102,1,0,0,0,1102,1103,5,4,0,0,1103,67,
        1,0,0,0,1104,1105,7,15,0,0,1105,69,1,0,0,0,1106,1107,5,3,0,0,1107,
        1112,3,64,32,0,1108,1109,5,5,0,0,1109,1111,3,64,32,0,1110,1108,1,
        0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,
        1115,1,0,0,0,1114,1112,1,0,0,0,1115,1116,5,4,0,0,1116,71,1,0,0,0,
        1117,1118,5,144,0,0,1118,1123,3,70,35,0,1119,1120,5,5,0,0,1120,1122,
        3,70,35,0,1121,1119,1,0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,
        1123,1124,1,0,0,0,1124,73,1,0,0,0,1125,1123,1,0,0,0,1126,1128,3,
        48,24,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1134,1,0,0,0,1129,
        1135,5,88,0,0,1130,1135,5,122,0,0,1131,1132,5,88,0,0,1132,1133,5,
        108,0,0,1133,1135,7,8,0,0,1134,1129,1,0,0,0,1134,1130,1,0,0,0,1134,
        1131,1,0,0,0,1135,1136,1,0,0,0,1136,1140,5,91,0,0,1137,1138,3,182,
        91,0,1138,1139,5,2,0,0,1139,1141,1,0,0,0,1140,1137,1,0,0,0,1140,
        1141,1,0,0,0,1141,1142,1,0,0,0,1142,1145,3,184,92,0,1143,1144,5,
        33,0,0,1144,1146,3,206,103,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,
        1146,1158,1,0,0,0,1147,1148,5,3,0,0,1148,1153,3,188,94,0,1149,1150,
        5,5,0,0,1150,1152,3,188,94,0,1151,1149,1,0,0,0,1152,1155,1,0,0,0,
        1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,1156,1,0,0,0,1155,1153,
        1,0,0,0,1156,1157,5,4,0,0,1157,1159,1,0,0,0,1158,1147,1,0,0,0,1158,
        1159,1,0,0,0,1159,1169,1,0,0,0,1160,1163,3,72,36,0,1161,1163,3,86,
        43,0,1162,1160,1,0,0,0,1162,1161,1,0,0,0,1163,1165,1,0,0,0,1164,
        1166,3,78,39,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1170,1,0,
        0,0,1167,1168,5,56,0,0,1168,1170,5,144,0,0,1169,1162,1,0,0,0,1169,
        1167,1,0,0,0,1170,1172,1,0,0,0,1171,1173,3,76,38,0,1172,1171,1,0,
        0,0,1172,1173,1,0,0,0,1173,75,1,0,0,0,1174,1175,5,124,0,0,1175,1180,
        3,100,50,0,1176,1177,5,5,0,0,1177,1179,3,100,50,0,1178,1176,1,0,
        0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,77,
        1,0,0,0,1182,1180,1,0,0,0,1183,1184,5,107,0,0,1184,1199,5,48,0,0,
        1185,1186,5,3,0,0,1186,1191,3,24,12,0,1187,1188,5,5,0,0,1188,1190,
        3,24,12,0,1189,1187,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,
        1191,1192,1,0,0,0,1192,1194,1,0,0,0,1193,1191,1,0,0,0,1194,1197,
        5,4,0,0,1195,1196,5,148,0,0,1196,1198,3,64,32,0,1197,1195,1,0,0,
        0,1197,1198,1,0,0,0,1198,1200,1,0,0,0,1199,1185,1,0,0,0,1199,1200,
        1,0,0,0,1200,1201,1,0,0,0,1201,1228,5,183,0,0,1202,1229,5,184,0,
        0,1203,1204,5,141,0,0,1204,1207,5,131,0,0,1205,1208,3,188,94,0,1206,
        1208,3,110,55,0,1207,1205,1,0,0,0,1207,1206,1,0,0,0,1208,1209,1,
        0,0,0,1209,1210,5,6,0,0,1210,1221,3,64,32,0,1211,1214,5,5,0,0,1212,
        1215,3,188,94,0,1213,1215,3,110,55,0,1214,1212,1,0,0,0,1214,1213,
        1,0,0,0,1215,1216,1,0,0,0,1216,1217,5,6,0,0,1217,1218,3,64,32,0,
        1218,1220,1,0,0,0,1219,1211,1,0,0,0,1220,1223,1,0,0,0,1221,1219,
        1,0,0,0,1221,1222,1,0,0,0,1222,1226,1,0,0,0,1223,1221,1,0,0,0,1224,
        1225,5,148,0,0,1225,1227,3,64,32,0,1226,1224,1,0,0,0,1226,1227,1,
        0,0,0,1227,1229,1,0,0,0,1228,1202,1,0,0,0,1228,1203,1,0,0,0,1229,
        79,1,0,0,0,1230,1234,5,112,0,0,1231,1232,3,182,91,0,1232,1233,5,
        2,0,0,1233,1235,1,0,0,0,1234,1231,1,0,0,0,1234,1235,1,0,0,0,1235,
        1236,1,0,0,0,1236,1243,3,202,101,0,1237,1238,5,6,0,0,1238,1244,3,
        82,41,0,1239,1240,5,3,0,0,1240,1241,3,82,41,0,1241,1242,5,4,0,0,
        1242,1244,1,0,0,0,1243,1237,1,0,0,0,1243,1239,1,0,0,0,1243,1244,
        1,0,0,0,1244,81,1,0,0,0,1245,1249,3,34,17,0,1246,1249,3,178,89,0,
        1247,1249,5,188,0,0,1248,1245,1,0,0,0,1248,1246,1,0,0,0,1248,1247,
        1,0,0,0,1249,83,1,0,0,0,1250,1261,5,119,0,0,1251,1262,3,190,95,0,
        1252,1253,3,182,91,0,1253,1254,5,2,0,0,1254,1256,1,0,0,0,1255,1252,
        1,0,0,0,1255,1256,1,0,0,0,1256,1259,1,0,0,0,1257,1260,3,184,92,0,
        1258,1260,3,194,97,0,1259,1257,1,0,0,0,1259,1258,1,0,0,0,1260,1262,
        1,0,0,0,1261,1251,1,0,0,0,1261,1255,1,0,0,0,1261,1262,1,0,0,0,1262,
        85,1,0,0,0,1263,1265,3,134,67,0,1264,1263,1,0,0,0,1264,1265,1,0,
        0,0,1265,1266,1,0,0,0,1266,1272,3,90,45,0,1267,1268,3,106,53,0,1268,
        1269,3,90,45,0,1269,1271,1,0,0,0,1270,1267,1,0,0,0,1271,1274,1,0,
        0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,1276,1,0,0,0,1274,1272,
        1,0,0,0,1275,1277,3,136,68,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,
        1277,1279,1,0,0,0,1278,1280,3,138,69,0,1279,1278,1,0,0,0,1279,1280,
        1,0,0,0,1280,87,1,0,0,0,1281,1289,3,98,49,0,1282,1283,3,102,51,0,
        1283,1285,3,98,49,0,1284,1286,3,104,52,0,1285,1284,1,0,0,0,1285,
        1286,1,0,0,0,1286,1288,1,0,0,0,1287,1282,1,0,0,0,1288,1291,1,0,0,
        0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,89,1,0,0,0,1291,1289,
        1,0,0,0,1292,1294,5,130,0,0,1293,1295,7,16,0,0,1294,1293,1,0,0,0,
        1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1301,3,100,50,0,1297,1298,
        5,5,0,0,1298,1300,3,100,50,0,1299,1297,1,0,0,0,1300,1303,1,0,0,0,
        1301,1299,1,0,0,0,1301,1302,1,0,0,0,1302,1316,1,0,0,0,1303,1301,
        1,0,0,0,1304,1314,5,75,0,0,1305,1310,3,98,49,0,1306,1307,5,5,0,0,
        1307,1309,3,98,49,0,1308,1306,1,0,0,0,1309,1312,1,0,0,0,1310,1308,
        1,0,0,0,1310,1311,1,0,0,0,1311,1315,1,0,0,0,1312,1310,1,0,0,0,1313,
        1315,3,88,44,0,1314,1305,1,0,0,0,1314,1313,1,0,0,0,1315,1317,1,0,
        0,0,1316,1304,1,0,0,0,1316,1317,1,0,0,0,1317,1320,1,0,0,0,1318,1319,
        5,148,0,0,1319,1321,3,64,32,0,1320,1318,1,0,0,0,1320,1321,1,0,0,
        0,1321,1336,1,0,0,0,1322,1323,5,78,0,0,1323,1324,5,40,0,0,1324,1329,
        3,64,32,0,1325,1326,5,5,0,0,1326,1328,3,64,32,0,1327,1325,1,0,0,
        0,1328,1331,1,0,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,1334,
        1,0,0,0,1331,1329,1,0,0,0,1332,1333,5,79,0,0,1333,1335,3,64,32,0,
        1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,0,0,0,1336,1322,
        1,0,0,0,1336,1337,1,0,0,0,1337,1352,1,0,0,0,1338,1339,5,174,0,0,
        1339,1340,3,210,105,0,1340,1341,5,33,0,0,1341,1349,3,120,60,0,1342,
        1343,5,5,0,0,1343,1344,3,210,105,0,1344,1345,5,33,0,0,1345,1346,
        3,120,60,0,1346,1348,1,0,0,0,1347,1342,1,0,0,0,1348,1351,1,0,0,0,
        1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1353,1,0,0,0,1351,1349,
        1,0,0,0,1352,1338,1,0,0,0,1352,1353,1,0,0,0,1353,1356,1,0,0,0,1354,
        1356,3,72,36,0,1355,1292,1,0,0,0,1355,1354,1,0,0,0,1356,91,1,0,0,
        0,1357,1358,3,86,43,0,1358,93,1,0,0,0,1359,1361,3,134,67,0,1360,
        1359,1,0,0,0,1360,1361,1,0,0,0,1361,1362,1,0,0,0,1362,1364,3,90,
        45,0,1363,1365,3,136,68,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,
        1367,1,0,0,0,1366,1368,3,138,69,0,1367,1366,1,0,0,0,1367,1368,1,
        0,0,0,1368,95,1,0,0,0,1369,1371,3,134,67,0,1370,1369,1,0,0,0,1370,
        1371,1,0,0,0,1371,1372,1,0,0,0,1372,1382,3,90,45,0,1373,1375,5,139,
        0,0,1374,1376,5,29,0,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,
        1380,1,0,0,0,1377,1380,5,90,0,0,1378,1380,5,68,0,0,1379,1373,1,0,
        0,0,1379,1377,1,0,0,0,1379,1378,1,0,0,0,1380,1381,1,0,0,0,1381,1383,
        3,90,45,0,1382,1379,1,0,0,0,1383,1384,1,0,0,0,1384,1382,1,0,0,0,
        1384,1385,1,0,0,0,1385,1387,1,0,0,0,1386,1388,3,136,68,0,1387,1386,
        1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1391,3,138,69,0,
        1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,97,1,0,0,0,1392,1393,3,
        182,91,0,1393,1394,5,2,0,0,1394,1396,1,0,0,0,1395,1392,1,0,0,0,1395,
        1396,1,0,0,0,1396,1397,1,0,0,0,1397,1402,3,184,92,0,1398,1400,5,
        33,0,0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,
        1403,3,206,103,0,1402,1399,1,0,0,0,1402,1403,1,0,0,0,1403,1409,1,
        0,0,0,1404,1405,5,85,0,0,1405,1406,5,40,0,0,1406,1410,3,194,97,0,
        1407,1408,5,102,0,0,1408,1410,5,85,0,0,1409,1404,1,0,0,0,1409,1407,
        1,0,0,0,1409,1410,1,0,0,0,1410,1457,1,0,0,0,1411,1412,3,182,91,0,
        1412,1413,5,2,0,0,1413,1415,1,0,0,0,1414,1411,1,0,0,0,1414,1415,
        1,0,0,0,1415,1416,1,0,0,0,1416,1417,3,222,111,0,1417,1418,5,3,0,
        0,1418,1423,3,64,32,0,1419,1420,5,5,0,0,1420,1422,3,64,32,0,1421,
        1419,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,
        0,1424,1426,1,0,0,0,1425,1423,1,0,0,0,1426,1431,5,4,0,0,1427,1429,
        5,33,0,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1430,1,0,0,0,1430,
        1432,3,206,103,0,1431,1428,1,0,0,0,1431,1432,1,0,0,0,1432,1457,1,
        0,0,0,1433,1443,5,3,0,0,1434,1439,3,98,49,0,1435,1436,5,5,0,0,1436,
        1438,3,98,49,0,1437,1435,1,0,0,0,1438,1441,1,0,0,0,1439,1437,1,0,
        0,0,1439,1440,1,0,0,0,1440,1444,1,0,0,0,1441,1439,1,0,0,0,1442,1444,
        3,88,44,0,1443,1434,1,0,0,0,1443,1442,1,0,0,0,1444,1445,1,0,0,0,
        1445,1446,5,4,0,0,1446,1457,1,0,0,0,1447,1448,5,3,0,0,1448,1449,
        3,86,43,0,1449,1454,5,4,0,0,1450,1452,5,33,0,0,1451,1450,1,0,0,0,
        1451,1452,1,0,0,0,1452,1453,1,0,0,0,1453,1455,3,206,103,0,1454,1451,
        1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,1395,1,0,0,0,1456,
        1414,1,0,0,0,1456,1433,1,0,0,0,1456,1447,1,0,0,0,1457,99,1,0,0,0,
        1458,1471,5,7,0,0,1459,1460,3,184,92,0,1460,1461,5,2,0,0,1461,1462,
        5,7,0,0,1462,1471,1,0,0,0,1463,1468,3,64,32,0,1464,1466,5,33,0,0,
        1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,1,0,0,0,1467,1469,
        3,174,87,0,1468,1465,1,0,0,0,1468,1469,1,0,0,0,1469,1471,1,0,0,0,
        1470,1458,1,0,0,0,1470,1459,1,0,0,0,1470,1463,1,0,0,0,1471,101,1,
        0,0,0,1472,1486,5,5,0,0,1473,1475,5,100,0,0,1474,1473,1,0,0,0,1474,
        1475,1,0,0,0,1475,1482,1,0,0,0,1476,1478,7,17,0,0,1477,1479,5,110,
        0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1483,1,0,0,0,1480,1483,
        5,87,0,0,1481,1483,5,51,0,0,1482,1476,1,0,0,0,1482,1480,1,0,0,0,
        1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1486,
        5,94,0,0,1485,1472,1,0,0,0,1485,1474,1,0,0,0,1486,103,1,0,0,0,1487,
        1488,5,107,0,0,1488,1502,3,64,32,0,1489,1490,5,142,0,0,1490,1491,
        5,3,0,0,1491,1496,3,188,94,0,1492,1493,5,5,0,0,1493,1495,3,188,94,
        0,1494,1492,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,1496,1497,
        1,0,0,0,1497,1499,1,0,0,0,1498,1496,1,0,0,0,1499,1500,5,4,0,0,1500,
        1502,1,0,0,0,1501,1487,1,0,0,0,1501,1489,1,0,0,0,1502,105,1,0,0,
        0,1503,1505,5,139,0,0,1504,1506,5,29,0,0,1505,1504,1,0,0,0,1505,
        1506,1,0,0,0,1506,1510,1,0,0,0,1507,1510,5,90,0,0,1508,1510,5,68,
        0,0,1509,1503,1,0,0,0,1509,1507,1,0,0,0,1509,1508,1,0,0,0,1510,107,
        1,0,0,0,1511,1513,3,48,24,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,
        1513,1514,1,0,0,0,1514,1517,5,141,0,0,1515,1516,5,108,0,0,1516,1518,
        7,8,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,
        1520,3,114,57,0,1520,1523,5,131,0,0,1521,1524,3,188,94,0,1522,1524,
        3,110,55,0,1523,1521,1,0,0,0,1523,1522,1,0,0,0,1524,1525,1,0,0,0,
        1525,1526,5,6,0,0,1526,1537,3,64,32,0,1527,1530,5,5,0,0,1528,1531,
        3,188,94,0,1529,1531,3,110,55,0,1530,1528,1,0,0,0,1530,1529,1,0,
        0,0,1531,1532,1,0,0,0,1532,1533,5,6,0,0,1533,1534,3,64,32,0,1534,
        1536,1,0,0,0,1535,1527,1,0,0,0,1536,1539,1,0,0,0,1537,1535,1,0,0,
        0,1537,1538,1,0,0,0,1538,1552,1,0,0,0,1539,1537,1,0,0,0,1540,1550,
        5,75,0,0,1541,1546,3,98,49,0,1542,1543,5,5,0,0,1543,1545,3,98,49,
        0,1544,1542,1,0,0,0,1545,1548,1,0,0,0,1546,1544,1,0,0,0,1546,1547,
        1,0,0,0,1547,1551,1,0,0,0,1548,1546,1,0,0,0,1549,1551,3,88,44,0,
        1550,1541,1,0,0,0,1550,1549,1,0,0,0,1551,1553,1,0,0,0,1552,1540,
        1,0,0,0,1552,1553,1,0,0,0,1553,1556,1,0,0,0,1554,1555,5,148,0,0,
        1555,1557,3,64,32,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,1559,
        1,0,0,0,1558,1560,3,76,38,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,
        1560,109,1,0,0,0,1561,1562,5,3,0,0,1562,1567,3,188,94,0,1563,1564,
        5,5,0,0,1564,1566,3,188,94,0,1565,1563,1,0,0,0,1566,1569,1,0,0,0,
        1567,1565,1,0,0,0,1567,1568,1,0,0,0,1568,1570,1,0,0,0,1569,1567,
        1,0,0,0,1570,1571,5,4,0,0,1571,111,1,0,0,0,1572,1574,3,48,24,0,1573,
        1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1578,5,141,
        0,0,1576,1577,5,108,0,0,1577,1579,7,8,0,0,1578,1576,1,0,0,0,1578,
        1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,3,114,57,0,1581,1584,5,
        131,0,0,1582,1585,3,188,94,0,1583,1585,3,110,55,0,1584,1582,1,0,
        0,0,1584,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1587,5,6,0,0,1587,1598,
        3,64,32,0,1588,1591,5,5,0,0,1589,1592,3,188,94,0,1590,1592,3,110,
        55,0,1591,1589,1,0,0,0,1591,1590,1,0,0,0,1592,1593,1,0,0,0,1593,
        1594,5,6,0,0,1594,1595,3,64,32,0,1595,1597,1,0,0,0,1596,1588,1,0,
        0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,1603,
        1,0,0,0,1600,1598,1,0,0,0,1601,1602,5,148,0,0,1602,1604,3,64,32,
        0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1607,
        3,76,38,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1612,1,0,0,0,
        1608,1610,3,136,68,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,
        1,0,0,0,1611,1613,3,138,69,0,1612,1609,1,0,0,0,1612,1613,1,0,0,0,
        1613,113,1,0,0,0,1614,1615,3,182,91,0,1615,1616,5,2,0,0,1616,1618,
        1,0,0,0,1617,1614,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,
        1622,3,184,92,0,1620,1621,5,33,0,0,1621,1623,3,212,106,0,1622,1620,
        1,0,0,0,1622,1623,1,0,0,0,1623,1629,1,0,0,0,1624,1625,5,85,0,0,1625,
        1626,5,40,0,0,1626,1630,3,194,97,0,1627,1628,5,102,0,0,1628,1630,
        5,85,0,0,1629,1624,1,0,0,0,1629,1627,1,0,0,0,1629,1630,1,0,0,0,1630,
        115,1,0,0,0,1631,1633,5,143,0,0,1632,1634,3,182,91,0,1633,1632,1,
        0,0,0,1633,1634,1,0,0,0,1634,1637,1,0,0,0,1635,1636,5,91,0,0,1636,
        1638,3,214,107,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,117,1,
        0,0,0,1639,1640,5,178,0,0,1640,1641,5,3,0,0,1641,1642,5,148,0,0,
        1642,1643,3,64,32,0,1643,1644,5,4,0,0,1644,119,1,0,0,0,1645,1647,
        5,3,0,0,1646,1648,3,216,108,0,1647,1646,1,0,0,0,1647,1648,1,0,0,
        0,1648,1659,1,0,0,0,1649,1650,5,153,0,0,1650,1651,5,40,0,0,1651,
        1656,3,64,32,0,1652,1653,5,5,0,0,1653,1655,3,64,32,0,1654,1652,1,
        0,0,0,1655,1658,1,0,0,0,1656,1654,1,0,0,0,1656,1657,1,0,0,0,1657,
        1660,1,0,0,0,1658,1656,1,0,0,0,1659,1649,1,0,0,0,1659,1660,1,0,0,
        0,1660,1661,1,0,0,0,1661,1662,5,109,0,0,1662,1663,5,40,0,0,1663,
        1668,3,140,70,0,1664,1665,5,5,0,0,1665,1667,3,140,70,0,1666,1664,
        1,0,0,0,1667,1670,1,0,0,0,1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,
        1672,1,0,0,0,1670,1668,1,0,0,0,1671,1673,3,124,62,0,1672,1671,1,
        0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1675,5,4,0,0,1675,
        121,1,0,0,0,1676,1710,5,152,0,0,1677,1711,3,210,105,0,1678,1680,
        5,3,0,0,1679,1681,3,216,108,0,1680,1679,1,0,0,0,1680,1681,1,0,0,
        0,1681,1692,1,0,0,0,1682,1683,5,153,0,0,1683,1684,5,40,0,0,1684,
        1689,3,64,32,0,1685,1686,5,5,0,0,1686,1688,3,64,32,0,1687,1685,1,
        0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,
        1693,1,0,0,0,1691,1689,1,0,0,0,1692,1682,1,0,0,0,1692,1693,1,0,0,
        0,1693,1704,1,0,0,0,1694,1695,5,109,0,0,1695,1696,5,40,0,0,1696,
        1701,3,140,70,0,1697,1698,5,5,0,0,1698,1700,3,140,70,0,1699,1697,
        1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,
        1705,1,0,0,0,1703,1701,1,0,0,0,1704,1694,1,0,0,0,1704,1705,1,0,0,
        0,1705,1707,1,0,0,0,1706,1708,3,124,62,0,1707,1706,1,0,0,0,1707,
        1708,1,0,0,0,1708,1709,1,0,0,0,1709,1711,5,4,0,0,1710,1677,1,0,0,
        0,1710,1678,1,0,0,0,1711,123,1,0,0,0,1712,1722,3,126,63,0,1713,1720,
        5,180,0,0,1714,1715,5,101,0,0,1715,1721,5,182,0,0,1716,1717,5,157,
        0,0,1717,1721,5,127,0,0,1718,1721,5,78,0,0,1719,1721,5,181,0,0,1720,
        1714,1,0,0,0,1720,1716,1,0,0,0,1720,1718,1,0,0,0,1720,1719,1,0,0,
        0,1721,1723,1,0,0,0,1722,1713,1,0,0,0,1722,1723,1,0,0,0,1723,125,
        1,0,0,0,1724,1731,7,18,0,0,1725,1732,3,148,74,0,1726,1727,5,39,0,
        0,1727,1728,3,144,72,0,1728,1729,5,32,0,0,1729,1730,3,146,73,0,1730,
        1732,1,0,0,0,1731,1725,1,0,0,0,1731,1726,1,0,0,0,1732,127,1,0,0,
        0,1733,1734,3,218,109,0,1734,1744,5,3,0,0,1735,1740,3,64,32,0,1736,
        1737,5,5,0,0,1737,1739,3,64,32,0,1738,1736,1,0,0,0,1739,1742,1,0,
        0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1745,1,0,0,0,1742,1740,
        1,0,0,0,1743,1745,5,7,0,0,1744,1735,1,0,0,0,1744,1743,1,0,0,0,1745,
        1746,1,0,0,0,1746,1747,5,4,0,0,1747,129,1,0,0,0,1748,1749,3,220,
        110,0,1749,1762,5,3,0,0,1750,1752,5,62,0,0,1751,1750,1,0,0,0,1751,
        1752,1,0,0,0,1752,1753,1,0,0,0,1753,1758,3,64,32,0,1754,1755,5,5,
        0,0,1755,1757,3,64,32,0,1756,1754,1,0,0,0,1757,1760,1,0,0,0,1758,
        1756,1,0,0,0,1758,1759,1,0,0,0,1759,1763,1,0,0,0,1760,1758,1,0,0,
        0,1761,1763,5,7,0,0,1762,1751,1,0,0,0,1762,1761,1,0,0,0,1762,1763,
        1,0,0,0,1763,1764,1,0,0,0,1764,1766,5,4,0,0,1765,1767,3,118,59,0,
        1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,131,1,0,0,0,1768,1769,3,
        150,75,0,1769,1779,5,3,0,0,1770,1775,3,64,32,0,1771,1772,5,5,0,0,
        1772,1774,3,64,32,0,1773,1771,1,0,0,0,1774,1777,1,0,0,0,1775,1773,
        1,0,0,0,1775,1776,1,0,0,0,1776,1780,1,0,0,0,1777,1775,1,0,0,0,1778,
        1780,5,7,0,0,1779,1770,1,0,0,0,1779,1778,1,0,0,0,1779,1780,1,0,0,
        0,1780,1781,1,0,0,0,1781,1783,5,4,0,0,1782,1784,3,118,59,0,1783,
        1782,1,0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1788,5,152,
        0,0,1786,1789,3,120,60,0,1787,1789,3,210,105,0,1788,1786,1,0,0,0,
        1788,1787,1,0,0,0,1789,133,1,0,0,0,1790,1792,5,149,0,0,1791,1793,
        5,116,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,
        1794,1799,3,54,27,0,1795,1796,5,5,0,0,1796,1798,3,54,27,0,1797,1795,
        1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,
        135,1,0,0,0,1801,1799,1,0,0,0,1802,1803,5,109,0,0,1803,1804,5,40,
        0,0,1804,1809,3,140,70,0,1805,1806,5,5,0,0,1806,1808,3,140,70,0,
        1807,1805,1,0,0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1809,1810,
        1,0,0,0,1810,137,1,0,0,0,1811,1809,1,0,0,0,1812,1813,5,98,0,0,1813,
        1816,3,64,32,0,1814,1815,7,19,0,0,1815,1817,3,64,32,0,1816,1814,
        1,0,0,0,1816,1817,1,0,0,0,1817,139,1,0,0,0,1818,1821,3,64,32,0,1819,
        1820,5,45,0,0,1820,1822,3,190,95,0,1821,1819,1,0,0,0,1821,1822,1,
        0,0,0,1822,1824,1,0,0,0,1823,1825,3,142,71,0,1824,1823,1,0,0,0,1824,
        1825,1,0,0,0,1825,1828,1,0,0,0,1826,1827,5,175,0,0,1827,1829,7,20,
        0,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,141,1,0,0,0,1830,1831,
        7,21,0,0,1831,143,1,0,0,0,1832,1833,3,64,32,0,1833,1834,5,155,0,
        0,1834,1843,1,0,0,0,1835,1836,3,64,32,0,1836,1837,5,158,0,0,1837,
        1843,1,0,0,0,1838,1839,5,157,0,0,1839,1843,5,127,0,0,1840,1841,5,
        156,0,0,1841,1843,5,155,0,0,1842,1832,1,0,0,0,1842,1835,1,0,0,0,
        1842,1838,1,0,0,0,1842,1840,1,0,0,0,1843,145,1,0,0,0,1844,1845,3,
        64,32,0,1845,1846,5,155,0,0,1846,1855,1,0,0,0,1847,1848,3,64,32,
        0,1848,1849,5,158,0,0,1849,1855,1,0,0,0,1850,1851,5,157,0,0,1851,
        1855,5,127,0,0,1852,1853,5,156,0,0,1853,1855,5,158,0,0,1854,1844,
        1,0,0,0,1854,1847,1,0,0,0,1854,1850,1,0,0,0,1854,1852,1,0,0,0,1855,
        147,1,0,0,0,1856,1857,3,64,32,0,1857,1858,5,155,0,0,1858,1864,1,
        0,0,0,1859,1860,5,156,0,0,1860,1864,5,155,0,0,1861,1862,5,157,0,
        0,1862,1864,5,127,0,0,1863,1856,1,0,0,0,1863,1859,1,0,0,0,1863,1861,
        1,0,0,0,1864,149,1,0,0,0,1865,1866,7,22,0,0,1866,1867,5,3,0,0,1867,
        1868,3,64,32,0,1868,1869,5,4,0,0,1869,1870,5,152,0,0,1870,1872,5,
        3,0,0,1871,1873,3,156,78,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,
        1874,1,0,0,0,1874,1876,3,160,80,0,1875,1877,3,126,63,0,1876,1875,
        1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,0,0,1878,1879,5,4,0,0,1879,
        1951,1,0,0,0,1880,1881,7,23,0,0,1881,1882,5,3,0,0,1882,1883,5,4,
        0,0,1883,1884,5,152,0,0,1884,1886,5,3,0,0,1885,1887,3,156,78,0,1886,
        1885,1,0,0,0,1886,1887,1,0,0,0,1887,1889,1,0,0,0,1888,1890,3,158,
        79,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1891,1,0,0,0,1891,
        1951,5,4,0,0,1892,1893,7,24,0,0,1893,1894,5,3,0,0,1894,1895,5,4,
        0,0,1895,1896,5,152,0,0,1896,1898,5,3,0,0,1897,1899,3,156,78,0,1898,
        1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,1901,3,160,
        80,0,1901,1902,5,4,0,0,1902,1951,1,0,0,0,1903,1904,7,25,0,0,1904,
        1905,5,3,0,0,1905,1907,3,64,32,0,1906,1908,3,152,76,0,1907,1906,
        1,0,0,0,1907,1908,1,0,0,0,1908,1910,1,0,0,0,1909,1911,3,154,77,0,
        1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,1912,1913,
        5,4,0,0,1913,1914,5,152,0,0,1914,1916,5,3,0,0,1915,1917,3,156,78,
        0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1919,
        3,160,80,0,1919,1920,5,4,0,0,1920,1951,1,0,0,0,1921,1922,5,164,0,
        0,1922,1923,5,3,0,0,1923,1924,3,64,32,0,1924,1925,5,5,0,0,1925,1926,
        3,34,17,0,1926,1927,5,4,0,0,1927,1928,5,152,0,0,1928,1930,5,3,0,
        0,1929,1931,3,156,78,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,
        1932,1,0,0,0,1932,1934,3,160,80,0,1933,1935,3,126,63,0,1934,1933,
        1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,5,4,0,0,1937,
        1951,1,0,0,0,1938,1939,5,165,0,0,1939,1940,5,3,0,0,1940,1941,3,64,
        32,0,1941,1942,5,4,0,0,1942,1943,5,152,0,0,1943,1945,5,3,0,0,1944,
        1946,3,156,78,0,1945,1944,1,0,0,0,1945,1946,1,0,0,0,1946,1947,1,
        0,0,0,1947,1948,3,160,80,0,1948,1949,5,4,0,0,1949,1951,1,0,0,0,1950,
        1865,1,0,0,0,1950,1880,1,0,0,0,1950,1892,1,0,0,0,1950,1903,1,0,0,
        0,1950,1921,1,0,0,0,1950,1938,1,0,0,0,1951,151,1,0,0,0,1952,1953,
        5,5,0,0,1953,1954,3,34,17,0,1954,153,1,0,0,0,1955,1956,5,5,0,0,1956,
        1957,3,34,17,0,1957,155,1,0,0,0,1958,1959,5,153,0,0,1959,1961,5,
        40,0,0,1960,1962,3,64,32,0,1961,1960,1,0,0,0,1962,1963,1,0,0,0,1963,
        1961,1,0,0,0,1963,1964,1,0,0,0,1964,157,1,0,0,0,1965,1966,5,109,
        0,0,1966,1968,5,40,0,0,1967,1969,3,64,32,0,1968,1967,1,0,0,0,1969,
        1970,1,0,0,0,1970,1968,1,0,0,0,1970,1971,1,0,0,0,1971,159,1,0,0,
        0,1972,1973,5,109,0,0,1973,1974,5,40,0,0,1974,1975,3,162,81,0,1975,
        161,1,0,0,0,1976,1978,3,64,32,0,1977,1979,3,142,71,0,1978,1977,1,
        0,0,0,1978,1979,1,0,0,0,1979,1987,1,0,0,0,1980,1981,5,5,0,0,1981,
        1983,3,64,32,0,1982,1984,3,142,71,0,1983,1982,1,0,0,0,1983,1984,
        1,0,0,0,1984,1986,1,0,0,0,1985,1980,1,0,0,0,1986,1989,1,0,0,0,1987,
        1985,1,0,0,0,1987,1988,1,0,0,0,1988,163,1,0,0,0,1989,1987,1,0,0,
        0,1990,1991,3,86,43,0,1991,165,1,0,0,0,1992,1993,3,86,43,0,1993,
        167,1,0,0,0,1994,1995,7,26,0,0,1995,169,1,0,0,0,1996,1997,5,188,
        0,0,1997,171,1,0,0,0,1998,2001,3,64,32,0,1999,2001,3,28,14,0,2000,
        1998,1,0,0,0,2000,1999,1,0,0,0,2001,173,1,0,0,0,2002,2003,7,27,0,
        0,2003,175,1,0,0,0,2004,2005,7,28,0,0,2005,177,1,0,0,0,2006,2007,
        3,224,112,0,2007,179,1,0,0,0,2008,2009,3,224,112,0,2009,181,1,0,
        0,0,2010,2011,3,224,112,0,2011,183,1,0,0,0,2012,2013,3,224,112,0,
        2013,185,1,0,0,0,2014,2015,3,224,112,0,2015,187,1,0,0,0,2016,2017,
        3,224,112,0,2017,189,1,0,0,0,2018,2019,3,224,112,0,2019,191,1,0,
        0,0,2020,2021,3,224,112,0,2021,193,1,0,0,0,2022,2023,3,224,112,0,
        2023,195,1,0,0,0,2024,2025,3,224,112,0,2025,197,1,0,0,0,2026,2027,
        3,224,112,0,2027,199,1,0,0,0,2028,2029,3,224,112,0,2029,201,1,0,
        0,0,2030,2031,3,224,112,0,2031,203,1,0,0,0,2032,2033,3,224,112,0,
        2033,205,1,0,0,0,2034,2035,3,224,112,0,2035,207,1,0,0,0,2036,2037,
        3,224,112,0,2037,209,1,0,0,0,2038,2039,3,224,112,0,2039,211,1,0,
        0,0,2040,2041,3,224,112,0,2041,213,1,0,0,0,2042,2043,3,224,112,0,
        2043,215,1,0,0,0,2044,2045,3,224,112,0,2045,217,1,0,0,0,2046,2047,
        3,224,112,0,2047,219,1,0,0,0,2048,2049,3,224,112,0,2049,221,1,0,
        0,0,2050,2051,3,224,112,0,2051,223,1,0,0,0,2052,2060,5,185,0,0,2053,
        2060,3,176,88,0,2054,2060,5,188,0,0,2055,2056,5,3,0,0,2056,2057,
        3,224,112,0,2057,2058,5,4,0,0,2058,2060,1,0,0,0,2059,2052,1,0,0,
        0,2059,2053,1,0,0,0,2059,2054,1,0,0,0,2059,2055,1,0,0,0,2060,225,
        1,0,0,0,297,229,237,244,249,255,261,263,289,296,303,309,313,318,
        321,328,331,335,343,347,349,353,357,361,364,371,377,383,388,399,
        405,409,413,416,420,426,431,440,447,453,457,461,466,472,484,488,
        493,496,499,502,506,509,523,530,537,539,542,548,553,561,566,581,
        587,597,602,612,616,618,622,627,629,637,643,648,655,666,669,671,
        678,682,689,695,701,707,712,721,726,737,742,753,758,762,778,788,
        793,801,813,818,826,833,836,839,846,849,852,855,859,867,872,882,
        887,896,903,907,911,914,922,935,938,946,955,959,964,991,1000,1012,
        1017,1029,1035,1042,1046,1056,1059,1065,1071,1080,1083,1087,1089,
        1091,1100,1112,1123,1127,1134,1140,1145,1153,1158,1162,1165,1169,
        1172,1180,1191,1197,1199,1207,1214,1221,1226,1228,1234,1243,1248,
        1255,1259,1261,1264,1272,1276,1279,1285,1289,1294,1301,1310,1314,
        1316,1320,1329,1334,1336,1349,1352,1355,1360,1364,1367,1370,1375,
        1379,1384,1387,1390,1395,1399,1402,1409,1414,1423,1428,1431,1439,
        1443,1451,1454,1456,1465,1468,1470,1474,1478,1482,1485,1496,1501,
        1505,1509,1512,1517,1523,1530,1537,1546,1550,1552,1556,1559,1567,
        1573,1578,1584,1591,1598,1603,1606,1609,1612,1617,1622,1629,1633,
        1637,1647,1656,1659,1668,1672,1680,1689,1692,1701,1704,1707,1710,
        1720,1722,1731,1740,1744,1751,1758,1762,1766,1775,1779,1783,1788,
        1792,1799,1809,1816,1821,1824,1828,1842,1854,1863,1872,1876,1886,
        1889,1898,1907,1910,1916,1930,1934,1945,1950,1963,1970,1978,1983,
        1987,2000,2059
    ]

class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'", "'ADD'", 
                     "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
                     "'AS'", "'ASC'", "'ATTACH'", "'AUTOINCREMENT'", "'BEFORE'", 
                     "'BEGIN'", "'BETWEEN'", "'BY'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'COMMIT'", 
                     "'CONFLICT'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'DATABASE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", 
                     "'DELETE'", "'DESC'", "'DETACH'", "'DISTINCT'", "'DROP'", 
                     "'EACH'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUSIVE'", "'EXISTS'", "'EXPLAIN'", "'FAIL'", "'FOR'", 
                     "'FOREIGN'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", 
                     "'INDEX'", "'INDEXED'", "'INITIALLY'", "'INNER'", "'INSERT'", 
                     "'INSTEAD'", "'INTERSECT'", "'INTO'", "'IS'", "'ISNULL'", 
                     "'JOIN'", "'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'", "'MATCH'", 
                     "'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", 
                     "'OF'", "'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'PLAN'", "'PRAGMA'", "'PRIMARY'", "'QUERY'", "'RAISE'", 
                     "'RECURSIVE'", "'REFERENCES'", "'REGEXP'", "'REINDEX'", 
                     "'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", 
                     "'RETURNING'", "'RIGHT'", "'ROLLBACK'", "'ROW'", "'ROWS'", 
                     "'SAVEPOINT'", "'SELECT'", "'SET'", "'TABLE'", "'TEMP'", 
                     "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'", "'TRIGGER'", 
                     "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", "'VACUUM'", 
                     "'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'", "'WHERE'", 
                     "'WITH'", "'WITHOUT'", "'FIRST_VALUE'", "'OVER'", "'PARTITION'", 
                     "'RANGE'", "'PRECEDING'", "'UNBOUNDED'", "'CURRENT'", 
                     "'FOLLOWING'", "'CUME_DIST'", "'DENSE_RANK'", "'LAG'", 
                     "'LAST_VALUE'", "'LEAD'", "'NTH_VALUE'", "'NTILE'", 
                     "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'GENERATED'", 
                     "'ALWAYS'", "'STORED'", "'TRUE'", "'FALSE'", "'WINDOW'", 
                     "'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", 
                     "'EXCLUDE'", "'TIES'", "'OTHERS'", "'DO'", "'NOTHING'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "ABORT_", "ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", 
                      "ANALYZE_", "AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", 
                      "BEFORE_", "BEGIN_", "BETWEEN_", "BY_", "CASCADE_", 
                      "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
                      "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", 
                      "CROSS_", "CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
                      "DATABASE_", "DEFAULT_", "DEFERRABLE_", "DEFERRED_", 
                      "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", 
                      "EACH_", "ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", 
                      "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", 
                      "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", 
                      "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", 
                      "INITIALLY_", "INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", 
                      "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_", "LEFT_", 
                      "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", "NOT_", 
                      "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", 
                      "ORDER_", "OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", 
                      "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_", "REGEXP_", 
                      "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_", 
                      "RETURNING_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", 
                      "SAVEPOINT_", "SELECT_", "SET_", "TABLE_", "TEMP_", 
                      "TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", "TRIGGER_", 
                      "UNION_", "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", 
                      "VALUES_", "VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", 
                      "WITH_", "WITHOUT_", "FIRST_VALUE_", "OVER_", "PARTITION_", 
                      "RANGE_", "PRECEDING_", "UNBOUNDED_", "CURRENT_", 
                      "FOLLOWING_", "CUME_DIST_", "DENSE_RANK_", "LAG_", 
                      "LAST_VALUE_", "LEAD_", "NTH_VALUE_", "NTILE_", "PERCENT_RANK_", 
                      "RANK_", "ROW_NUMBER_", "GENERATED_", "ALWAYS_", "STORED_", 
                      "TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", 
                      "LAST_", "FILTER_", "GROUPS_", "EXCLUDE_", "TIES_", 
                      "OTHERS_", "DO_", "NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", 
                      "BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", 
                      "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
                      "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_alter_table_stmt = 3
    RULE_analyze_stmt = 4
    RULE_attach_stmt = 5
    RULE_begin_stmt = 6
    RULE_commit_stmt = 7
    RULE_rollback_stmt = 8
    RULE_savepoint_stmt = 9
    RULE_release_stmt = 10
    RULE_create_index_stmt = 11
    RULE_indexed_column = 12
    RULE_create_table_stmt = 13
    RULE_column_def = 14
    RULE_type_name = 15
    RULE_column_constraint = 16
    RULE_signed_number = 17
    RULE_table_constraint = 18
    RULE_foreign_key_clause = 19
    RULE_conflict_clause = 20
    RULE_create_trigger_stmt = 21
    RULE_create_view_stmt = 22
    RULE_create_virtual_table_stmt = 23
    RULE_with_clause = 24
    RULE_cte_table_name = 25
    RULE_recursive_cte = 26
    RULE_common_table_expression = 27
    RULE_delete_stmt = 28
    RULE_delete_stmt_limited = 29
    RULE_detach_stmt = 30
    RULE_drop_stmt = 31
    RULE_expr = 32
    RULE_raise_function = 33
    RULE_literal_value = 34
    RULE_value_row = 35
    RULE_values_clause = 36
    RULE_insert_stmt = 37
    RULE_returning_clause = 38
    RULE_upsert_clause = 39
    RULE_pragma_stmt = 40
    RULE_pragma_value = 41
    RULE_reindex_stmt = 42
    RULE_select_stmt = 43
    RULE_join_clause = 44
    RULE_select_core = 45
    RULE_factored_select_stmt = 46
    RULE_simple_select_stmt = 47
    RULE_compound_select_stmt = 48
    RULE_table_or_subquery = 49
    RULE_result_column = 50
    RULE_join_operator = 51
    RULE_join_constraint = 52
    RULE_compound_operator = 53
    RULE_update_stmt = 54
    RULE_column_name_list = 55
    RULE_update_stmt_limited = 56
    RULE_qualified_table_name = 57
    RULE_vacuum_stmt = 58
    RULE_filter_clause = 59
    RULE_window_defn = 60
    RULE_over_clause = 61
    RULE_frame_spec = 62
    RULE_frame_clause = 63
    RULE_simple_function_invocation = 64
    RULE_aggregate_function_invocation = 65
    RULE_window_function_invocation = 66
    RULE_common_table_stmt = 67
    RULE_order_by_stmt = 68
    RULE_limit_stmt = 69
    RULE_ordering_term = 70
    RULE_asc_desc = 71
    RULE_frame_left = 72
    RULE_frame_right = 73
    RULE_frame_single = 74
    RULE_window_function = 75
    RULE_offset = 76
    RULE_default_value = 77
    RULE_partition_by = 78
    RULE_order_by_expr = 79
    RULE_order_by_expr_asc_desc = 80
    RULE_expr_asc_desc = 81
    RULE_initial_select = 82
    RULE_recursive_select = 83
    RULE_unary_operator = 84
    RULE_error_message = 85
    RULE_module_argument = 86
    RULE_column_alias = 87
    RULE_keyword = 88
    RULE_name = 89
    RULE_function_name = 90
    RULE_schema_name = 91
    RULE_table_name = 92
    RULE_table_or_index_name = 93
    RULE_column_name = 94
    RULE_collation_name = 95
    RULE_foreign_table = 96
    RULE_index_name = 97
    RULE_trigger_name = 98
    RULE_view_name = 99
    RULE_module_name = 100
    RULE_pragma_name = 101
    RULE_savepoint_name = 102
    RULE_table_alias = 103
    RULE_transaction_name = 104
    RULE_window_name = 105
    RULE_alias = 106
    RULE_filename = 107
    RULE_base_window_name = 108
    RULE_simple_func = 109
    RULE_aggregate_func = 110
    RULE_table_function_name = 111
    RULE_any_name = 112

    ruleNames =  [ "parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "value_row", "values_clause", "insert_stmt", "returning_clause", 
                   "upsert_clause", "pragma_stmt", "pragma_value", "reindex_stmt", 
                   "select_stmt", "join_clause", "select_core", "factored_select_stmt", 
                   "simple_select_stmt", "compound_select_stmt", "table_or_subquery", 
                   "result_column", "join_operator", "join_constraint", 
                   "compound_operator", "update_stmt", "column_name_list", 
                   "update_stmt_limited", "qualified_table_name", "vacuum_stmt", 
                   "filter_clause", "window_defn", "over_clause", "frame_spec", 
                   "frame_clause", "simple_function_invocation", "aggregate_function_invocation", 
                   "window_function_invocation", "common_table_stmt", "order_by_stmt", 
                   "limit_stmt", "ordering_term", "asc_desc", "frame_left", 
                   "frame_right", "frame_single", "window_function", "offset", 
                   "default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive_select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "column_name", "collation_name", 
                   "foreign_table", "index_name", "trigger_name", "view_name", 
                   "module_name", "pragma_name", "savepoint_name", "table_alias", 
                   "transaction_name", "window_name", "alias", "filename", 
                   "base_window_name", "simple_func", "aggregate_func", 
                   "table_function_name", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    ABORT_=25
    ACTION_=26
    ADD_=27
    AFTER_=28
    ALL_=29
    ALTER_=30
    ANALYZE_=31
    AND_=32
    AS_=33
    ASC_=34
    ATTACH_=35
    AUTOINCREMENT_=36
    BEFORE_=37
    BEGIN_=38
    BETWEEN_=39
    BY_=40
    CASCADE_=41
    CASE_=42
    CAST_=43
    CHECK_=44
    COLLATE_=45
    COLUMN_=46
    COMMIT_=47
    CONFLICT_=48
    CONSTRAINT_=49
    CREATE_=50
    CROSS_=51
    CURRENT_DATE_=52
    CURRENT_TIME_=53
    CURRENT_TIMESTAMP_=54
    DATABASE_=55
    DEFAULT_=56
    DEFERRABLE_=57
    DEFERRED_=58
    DELETE_=59
    DESC_=60
    DETACH_=61
    DISTINCT_=62
    DROP_=63
    EACH_=64
    ELSE_=65
    END_=66
    ESCAPE_=67
    EXCEPT_=68
    EXCLUSIVE_=69
    EXISTS_=70
    EXPLAIN_=71
    FAIL_=72
    FOR_=73
    FOREIGN_=74
    FROM_=75
    FULL_=76
    GLOB_=77
    GROUP_=78
    HAVING_=79
    IF_=80
    IGNORE_=81
    IMMEDIATE_=82
    IN_=83
    INDEX_=84
    INDEXED_=85
    INITIALLY_=86
    INNER_=87
    INSERT_=88
    INSTEAD_=89
    INTERSECT_=90
    INTO_=91
    IS_=92
    ISNULL_=93
    JOIN_=94
    KEY_=95
    LEFT_=96
    LIKE_=97
    LIMIT_=98
    MATCH_=99
    NATURAL_=100
    NO_=101
    NOT_=102
    NOTNULL_=103
    NULL_=104
    OF_=105
    OFFSET_=106
    ON_=107
    OR_=108
    ORDER_=109
    OUTER_=110
    PLAN_=111
    PRAGMA_=112
    PRIMARY_=113
    QUERY_=114
    RAISE_=115
    RECURSIVE_=116
    REFERENCES_=117
    REGEXP_=118
    REINDEX_=119
    RELEASE_=120
    RENAME_=121
    REPLACE_=122
    RESTRICT_=123
    RETURNING_=124
    RIGHT_=125
    ROLLBACK_=126
    ROW_=127
    ROWS_=128
    SAVEPOINT_=129
    SELECT_=130
    SET_=131
    TABLE_=132
    TEMP_=133
    TEMPORARY_=134
    THEN_=135
    TO_=136
    TRANSACTION_=137
    TRIGGER_=138
    UNION_=139
    UNIQUE_=140
    UPDATE_=141
    USING_=142
    VACUUM_=143
    VALUES_=144
    VIEW_=145
    VIRTUAL_=146
    WHEN_=147
    WHERE_=148
    WITH_=149
    WITHOUT_=150
    FIRST_VALUE_=151
    OVER_=152
    PARTITION_=153
    RANGE_=154
    PRECEDING_=155
    UNBOUNDED_=156
    CURRENT_=157
    FOLLOWING_=158
    CUME_DIST_=159
    DENSE_RANK_=160
    LAG_=161
    LAST_VALUE_=162
    LEAD_=163
    NTH_VALUE_=164
    NTILE_=165
    PERCENT_RANK_=166
    RANK_=167
    ROW_NUMBER_=168
    GENERATED_=169
    ALWAYS_=170
    STORED_=171
    TRUE_=172
    FALSE_=173
    WINDOW_=174
    NULLS_=175
    FIRST_=176
    LAST_=177
    FILTER_=178
    GROUPS_=179
    EXCLUDE_=180
    TIES_=181
    OTHERS_=182
    DO_=183
    NOTHING_=184
    IDENTIFIER=185
    NUMERIC_LITERAL=186
    BIND_PARAMETER=187
    STRING_LITERAL=188
    BLOB_LITERAL=189
    SINGLE_LINE_COMMENT=190
    MULTILINE_COMMENT=191
    SPACES=192
    UNEXPECTED_CHAR=193

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -6339801325483589630) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -7971300971697405919) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 550913) != 0):
                self.state = 226
                self.sql_stmt_list()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 234
                self.match(SQLiteParser.SCOL)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.sql_stmt()
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 242 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 241
                        self.match(SQLiteParser.SCOL)
                        self.state = 244 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    self.state = 246
                    self.sql_stmt() 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 252
                    self.match(SQLiteParser.SCOL) 
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 258
                self.match(SQLiteParser.EXPLAIN_)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 259
                    self.match(SQLiteParser.QUERY_)
                    self.state = 260
                    self.match(SQLiteParser.PLAN_)




            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 265
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 266
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 267
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 268
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 269
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 270
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 271
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 272
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 273
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 274
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 275
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 276
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 277
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 278
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 279
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 280
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 281
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 282
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 283
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 284
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 285
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 286
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 287
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 288
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.new_table_name = None # Table_nameContext
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_nameContext,i)


        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(SQLiteParser.ALTER_)
            self.state = 292
            self.match(SQLiteParser.TABLE_)
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 293
                self.schema_name()
                self.state = 294
                self.match(SQLiteParser.DOT)


            self.state = 298
            self.table_name()
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 299
                self.match(SQLiteParser.RENAME_)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 300
                    self.match(SQLiteParser.TO_)
                    self.state = 301
                    localctx.new_table_name = self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 303
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 302
                        self.match(SQLiteParser.COLUMN_)


                    self.state = 305
                    localctx.old_column_name = self.column_name()
                    self.state = 306
                    self.match(SQLiteParser.TO_)
                    self.state = 307
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [27]:
                self.state = 311
                self.match(SQLiteParser.ADD_)
                self.state = 313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 312
                    self.match(SQLiteParser.COLUMN_)


                self.state = 315
                self.column_def()
                pass
            elif token in [63]:
                self.state = 316
                self.match(SQLiteParser.DROP_)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self.match(SQLiteParser.COLUMN_)


                self.state = 320
                self.column_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(SQLiteParser.ANALYZE_)
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 324
                self.schema_name()

            elif la_ == 2:
                self.state = 328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 325
                    self.schema_name()
                    self.state = 326
                    self.match(SQLiteParser.DOT)


                self.state = 330
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(SQLiteParser.ATTACH_)
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 334
                self.match(SQLiteParser.DATABASE_)


            self.state = 337
            self.expr(0)
            self.state = 338
            self.match(SQLiteParser.AS_)
            self.state = 339
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(SQLiteParser.BEGIN_)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 16779265) != 0):
                self.state = 342
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 16779265) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 345
                self.match(SQLiteParser.TRANSACTION_)
                self.state = 347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 346
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            _la = self._input.LA(1)
            if not(_la==47 or _la==66):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 352
                self.match(SQLiteParser.TRANSACTION_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(SQLiteParser.ROLLBACK_)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 356
                self.match(SQLiteParser.TRANSACTION_)


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 359
                self.match(SQLiteParser.TO_)
                self.state = 361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 360
                    self.match(SQLiteParser.SAVEPOINT_)


                self.state = 363
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(SQLiteParser.SAVEPOINT_)
            self.state = 367
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(SQLiteParser.RELEASE_)
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 370
                self.match(SQLiteParser.SAVEPOINT_)


            self.state = 373
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(SQLiteParser.CREATE_)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 376
                self.match(SQLiteParser.UNIQUE_)


            self.state = 379
            self.match(SQLiteParser.INDEX_)
            self.state = 383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 380
                self.match(SQLiteParser.IF_)
                self.state = 381
                self.match(SQLiteParser.NOT_)
                self.state = 382
                self.match(SQLiteParser.EXISTS_)


            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 385
                self.schema_name()
                self.state = 386
                self.match(SQLiteParser.DOT)


            self.state = 390
            self.index_name()
            self.state = 391
            self.match(SQLiteParser.ON_)
            self.state = 392
            self.table_name()
            self.state = 393
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 394
            self.indexed_column()
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 395
                self.match(SQLiteParser.COMMA)
                self.state = 396
                self.indexed_column()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 403
                self.match(SQLiteParser.WHERE_)
                self.state = 404
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 407
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 408
                self.expr(0)
                pass


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 411
                self.match(SQLiteParser.COLLATE_)
                self.state = 412
                self.collation_name()


            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==60:
                self.state = 415
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_ROW_ID = None # Token

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(SQLiteParser.CREATE_)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 419
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 422
            self.match(SQLiteParser.TABLE_)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 423
                self.match(SQLiteParser.IF_)
                self.state = 424
                self.match(SQLiteParser.NOT_)
                self.state = 425
                self.match(SQLiteParser.EXISTS_)


            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 428
                self.schema_name()
                self.state = 429
                self.match(SQLiteParser.DOT)


            self.state = 433
            self.table_name()
            self.state = 457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 434
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 435
                self.column_def()
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 436
                        self.match(SQLiteParser.COMMA)
                        self.state = 437
                        self.column_def() 
                    self.state = 442
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 443
                    self.match(SQLiteParser.COMMA)
                    self.state = 444
                    self.table_constraint()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 450
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 451
                    self.match(SQLiteParser.WITHOUT_)
                    self.state = 452
                    localctx.row_ROW_ID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [33]:
                self.state = 455
                self.match(SQLiteParser.AS_)
                self.state = 456
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.column_name()
            self.state = 461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 460
                self.type_name()


            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 72673329139417088) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 274877941765) != 0) or _la==169:
                self.state = 463
                self.column_constraint()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 469
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 472 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 474
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 475
                self.signed_number()
                self.state = 476
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 478
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 479
                self.signed_number()
                self.state = 480
                self.match(SQLiteParser.COMMA)
                self.state = 481
                self.signed_number()
                self.state = 482
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 486
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 487
                self.name()


            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.state = 490
                self.match(SQLiteParser.PRIMARY_)
                self.state = 491
                self.match(SQLiteParser.KEY_)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==60:
                    self.state = 492
                    self.asc_desc()


                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 495
                    self.conflict_clause()


                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 498
                    self.match(SQLiteParser.AUTOINCREMENT_)


                pass
            elif token in [102, 104, 140]:
                self.state = 506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102, 104]:
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==102:
                        self.state = 501
                        self.match(SQLiteParser.NOT_)


                    self.state = 504
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [140]:
                    self.state = 505
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 508
                    self.conflict_clause()


                pass
            elif token in [44]:
                self.state = 511
                self.match(SQLiteParser.CHECK_)
                self.state = 512
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 513
                self.expr(0)
                self.state = 514
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [56]:
                self.state = 516
                self.match(SQLiteParser.DEFAULT_)
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 517
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 518
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 519
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 520
                    self.expr(0)
                    self.state = 521
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [45]:
                self.state = 525
                self.match(SQLiteParser.COLLATE_)
                self.state = 526
                self.collation_name()
                pass
            elif token in [117]:
                self.state = 527
                self.foreign_key_clause()
                pass
            elif token in [33, 169]:
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 528
                    self.match(SQLiteParser.GENERATED_)
                    self.state = 529
                    self.match(SQLiteParser.ALWAYS_)


                self.state = 532
                self.match(SQLiteParser.AS_)
                self.state = 533
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 534
                self.expr(0)
                self.state = 535
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==171:
                    self.state = 536
                    _la = self._input.LA(1)
                    if not(_la==146 or _la==171):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 541
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 544
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 546
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 547
                self.name()


            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113, 140]:
                self.state = 553
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113]:
                    self.state = 550
                    self.match(SQLiteParser.PRIMARY_)
                    self.state = 551
                    self.match(SQLiteParser.KEY_)
                    pass
                elif token in [140]:
                    self.state = 552
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 555
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 556
                self.indexed_column()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 557
                    self.match(SQLiteParser.COMMA)
                    self.state = 558
                    self.indexed_column()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 564
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 565
                    self.conflict_clause()


                pass
            elif token in [44]:
                self.state = 568
                self.match(SQLiteParser.CHECK_)
                self.state = 569
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 570
                self.expr(0)
                self.state = 571
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [74]:
                self.state = 573
                self.match(SQLiteParser.FOREIGN_)
                self.state = 574
                self.match(SQLiteParser.KEY_)
                self.state = 575
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 576
                self.column_name()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 577
                    self.match(SQLiteParser.COMMA)
                    self.state = 578
                    self.column_name()
                    self.state = 583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 584
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 585
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON_)
            else:
                return self.getToken(SQLiteParser.ON_, i)

        def MATCH_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH_)
            else:
                return self.getToken(SQLiteParser.MATCH_, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DELETE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE_)
            else:
                return self.getToken(SQLiteParser.DELETE_, i)

        def UPDATE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE_)
            else:
                return self.getToken(SQLiteParser.UPDATE_, i)

        def SET_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET_)
            else:
                return self.getToken(SQLiteParser.SET_, i)

        def CASCADE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE_)
            else:
                return self.getToken(SQLiteParser.CASCADE_, i)

        def RESTRICT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT_)
            else:
                return self.getToken(SQLiteParser.RESTRICT_, i)

        def NO_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO_)
            else:
                return self.getToken(SQLiteParser.NO_, i)

        def ACTION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION_)
            else:
                return self.getToken(SQLiteParser.ACTION_, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT_)
            else:
                return self.getToken(SQLiteParser.DEFAULT_, i)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(SQLiteParser.REFERENCES_)
            self.state = 590
            self.foreign_table()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 591
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 592
                self.column_name()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 593
                    self.match(SQLiteParser.COMMA)
                    self.state = 594
                    self.column_name()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==99 or _la==107:
                self.state = 616
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [107]:
                    self.state = 604
                    self.match(SQLiteParser.ON_)
                    self.state = 605
                    _la = self._input.LA(1)
                    if not(_la==59 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 612
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [131]:
                        self.state = 606
                        self.match(SQLiteParser.SET_)
                        self.state = 607
                        _la = self._input.LA(1)
                        if not(_la==56 or _la==104):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [41]:
                        self.state = 608
                        self.match(SQLiteParser.CASCADE_)
                        pass
                    elif token in [123]:
                        self.state = 609
                        self.match(SQLiteParser.RESTRICT_)
                        pass
                    elif token in [101]:
                        self.state = 610
                        self.match(SQLiteParser.NO_)
                        self.state = 611
                        self.match(SQLiteParser.ACTION_)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [99]:
                    self.state = 614
                    self.match(SQLiteParser.MATCH_)
                    self.state = 615
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 621
                    self.match(SQLiteParser.NOT_)


                self.state = 624
                self.match(SQLiteParser.DEFERRABLE_)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 625
                    self.match(SQLiteParser.INITIALLY_)
                    self.state = 626
                    _la = self._input.LA(1)
                    if not(_la==58 or _la==82):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(SQLiteParser.ON_)
            self.state = 632
            self.match(SQLiteParser.CONFLICT_)
            self.state = 633
            _la = self._input.LA(1)
            if not(_la==25 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def OF_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF_)
            else:
                return self.getToken(SQLiteParser.OF_, i)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(SQLiteParser.CREATE_)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 636
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 639
            self.match(SQLiteParser.TRIGGER_)
            self.state = 643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 640
                self.match(SQLiteParser.IF_)
                self.state = 641
                self.match(SQLiteParser.NOT_)
                self.state = 642
                self.match(SQLiteParser.EXISTS_)


            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 645
                self.schema_name()
                self.state = 646
                self.match(SQLiteParser.DOT)


            self.state = 650
            self.trigger_name()
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 651
                self.match(SQLiteParser.BEFORE_)
                pass
            elif token in [28]:
                self.state = 652
                self.match(SQLiteParser.AFTER_)
                pass
            elif token in [89]:
                self.state = 653
                self.match(SQLiteParser.INSTEAD_)
                self.state = 654
                self.match(SQLiteParser.OF_)
                pass
            elif token in [59, 88, 141]:
                pass
            else:
                pass
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.state = 657
                self.match(SQLiteParser.DELETE_)
                pass
            elif token in [88]:
                self.state = 658
                self.match(SQLiteParser.INSERT_)
                pass
            elif token in [141]:
                self.state = 659
                self.match(SQLiteParser.UPDATE_)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 660
                    self.match(SQLiteParser.OF_)
                    self.state = 661
                    self.column_name()
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 662
                        self.match(SQLiteParser.COMMA)
                        self.state = 663
                        self.column_name()
                        self.state = 668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 673
            self.match(SQLiteParser.ON_)
            self.state = 674
            self.table_name()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 675
                self.match(SQLiteParser.FOR_)
                self.state = 676
                self.match(SQLiteParser.EACH_)
                self.state = 677
                self.match(SQLiteParser.ROW_)


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 680
                self.match(SQLiteParser.WHEN_)
                self.state = 681
                self.expr(0)


            self.state = 684
            self.match(SQLiteParser.BEGIN_)
            self.state = 693 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 685
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 686
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 687
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 688
                    self.select_stmt()
                    pass


                self.state = 691
                self.match(SQLiteParser.SCOL)
                self.state = 695 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==59 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 2386912217732743169) != 0)):
                    break

            self.state = 697
            self.match(SQLiteParser.END_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(SQLiteParser.CREATE_)
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 700
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 703
            self.match(SQLiteParser.VIEW_)
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 704
                self.match(SQLiteParser.IF_)
                self.state = 705
                self.match(SQLiteParser.NOT_)
                self.state = 706
                self.match(SQLiteParser.EXISTS_)


            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 709
                self.schema_name()
                self.state = 710
                self.match(SQLiteParser.DOT)


            self.state = 714
            self.view_name()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 715
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 716
                self.column_name()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 717
                    self.match(SQLiteParser.COMMA)
                    self.state = 718
                    self.column_name()
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 724
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 728
            self.match(SQLiteParser.AS_)
            self.state = 729
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(SQLiteParser.CREATE_)
            self.state = 732
            self.match(SQLiteParser.VIRTUAL_)
            self.state = 733
            self.match(SQLiteParser.TABLE_)
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 734
                self.match(SQLiteParser.IF_)
                self.state = 735
                self.match(SQLiteParser.NOT_)
                self.state = 736
                self.match(SQLiteParser.EXISTS_)


            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 739
                self.schema_name()
                self.state = 740
                self.match(SQLiteParser.DOT)


            self.state = 744
            self.table_name()
            self.state = 745
            self.match(SQLiteParser.USING_)
            self.state = 746
            self.module_name()
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 747
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 748
                self.module_argument()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 749
                    self.match(SQLiteParser.COMMA)
                    self.state = 750
                    self.module_argument()
                    self.state = 755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 756
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(SQLiteParser.WITH_)
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 761
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 764
            self.cte_table_name()
            self.state = 765
            self.match(SQLiteParser.AS_)
            self.state = 766
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 767
            self.select_stmt()
            self.state = 768
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 769
                self.match(SQLiteParser.COMMA)
                self.state = 770
                self.cte_table_name()
                self.state = 771
                self.match(SQLiteParser.AS_)
                self.state = 772
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 773
                self.select_stmt()
                self.state = 774
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.table_name()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 782
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 783
                self.column_name()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 784
                    self.match(SQLiteParser.COMMA)
                    self.state = 785
                    self.column_name()
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 791
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def recursive_select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive_selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.cte_table_name()
            self.state = 796
            self.match(SQLiteParser.AS_)
            self.state = 797
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 798
            self.initial_select()
            self.state = 799
            self.match(SQLiteParser.UNION_)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 800
                self.match(SQLiteParser.ALL_)


            self.state = 803
            self.recursive_select()
            self.state = 804
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.table_name()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 807
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 808
                self.column_name()
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 809
                    self.match(SQLiteParser.COMMA)
                    self.state = 810
                    self.column_name()
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 816
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 820
            self.match(SQLiteParser.AS_)
            self.state = 821
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 822
            self.select_stmt()
            self.state = 823
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 825
                self.with_clause()


            self.state = 828
            self.match(SQLiteParser.DELETE_)
            self.state = 829
            self.match(SQLiteParser.FROM_)
            self.state = 830
            self.qualified_table_name()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 831
                self.match(SQLiteParser.WHERE_)
                self.state = 832
                self.expr(0)


            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 835
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 838
                self.with_clause()


            self.state = 841
            self.match(SQLiteParser.DELETE_)
            self.state = 842
            self.match(SQLiteParser.FROM_)
            self.state = 843
            self.qualified_table_name()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 844
                self.match(SQLiteParser.WHERE_)
                self.state = 845
                self.expr(0)


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 848
                self.returning_clause()


            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98 or _la==109:
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 851
                    self.order_by_stmt()


                self.state = 854
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(SQLiteParser.DETACH_)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 858
                self.match(SQLiteParser.DATABASE_)


            self.state = 861
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object_ = None # Token

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(SQLiteParser.DROP_)
            self.state = 864
            localctx.object_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 2324138882699886593) != 0)):
                localctx.object_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 865
                self.match(SQLiteParser.IF_)
                self.state = 866
                self.match(SQLiteParser.EXISTS_)


            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 869
                self.schema_name()
                self.state = 870
                self.match(SQLiteParser.DOT)


            self.state = 874
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def WHEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN_)
            else:
                return self.getToken(SQLiteParser.WHEN_, i)

        def THEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN_)
            else:
                return self.getToken(SQLiteParser.THEN_, i)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 877
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 878
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        self.state = 879
                        self.schema_name()
                        self.state = 880
                        self.match(SQLiteParser.DOT)


                    self.state = 884
                    self.table_name()
                    self.state = 885
                    self.match(SQLiteParser.DOT)


                self.state = 889
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 890
                self.unary_operator()
                self.state = 891
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 893
                self.function_name()
                self.state = 894
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 907
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                    self.state = 896
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                    if la_ == 1:
                        self.state = 895
                        self.match(SQLiteParser.DISTINCT_)


                    self.state = 898
                    self.expr(0)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 899
                        self.match(SQLiteParser.COMMA)
                        self.state = 900
                        self.expr(0)
                        self.state = 905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [7]:
                    self.state = 906
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [4]:
                    pass
                else:
                    pass
                self.state = 909
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 910
                    self.filter_clause()


                self.state = 914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 913
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 916
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 917
                self.expr(0)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 918
                    self.match(SQLiteParser.COMMA)
                    self.state = 919
                    self.expr(0)
                    self.state = 924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 925
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 927
                self.match(SQLiteParser.CAST_)
                self.state = 928
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 929
                self.expr(0)
                self.state = 930
                self.match(SQLiteParser.AS_)
                self.state = 931
                self.type_name()
                self.state = 932
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==102:
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==102:
                        self.state = 934
                        self.match(SQLiteParser.NOT_)


                    self.state = 937
                    self.match(SQLiteParser.EXISTS_)


                self.state = 940
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 941
                self.select_stmt()
                self.state = 942
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 944
                self.match(SQLiteParser.CASE_)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.expr(0)


                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 948
                    self.match(SQLiteParser.WHEN_)
                    self.state = 949
                    self.expr(0)
                    self.state = 950
                    self.match(SQLiteParser.THEN_)
                    self.state = 951
                    self.expr(0)
                    self.state = 955 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==147):
                        break

                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 957
                    self.match(SQLiteParser.ELSE_)
                    self.state = 958
                    self.expr(0)


                self.state = 961
                self.match(SQLiteParser.END_)
                pass

            elif la_ == 10:
                self.state = 963
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1091
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1089
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 966
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 967
                        self.match(SQLiteParser.PIPE2)
                        self.state = 968
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 969
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 970
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12416) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 971
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 972
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 973
                        _la = self._input.LA(1)
                        if not(_la==8 or _la==9):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 974
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 975
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 976
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 977
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 978
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 979
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3932160) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 980
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 981
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1000
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 982
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 983
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 984
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 985
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 986
                            self.match(SQLiteParser.IS_)
                            pass

                        elif la_ == 6:
                            self.state = 987
                            self.match(SQLiteParser.IS_)
                            self.state = 988
                            self.match(SQLiteParser.NOT_)
                            pass

                        elif la_ == 7:
                            self.state = 989
                            self.match(SQLiteParser.IS_)
                            self.state = 991
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==102:
                                self.state = 990
                                self.match(SQLiteParser.NOT_)


                            self.state = 993
                            self.match(SQLiteParser.DISTINCT_)
                            self.state = 994
                            self.match(SQLiteParser.FROM_)
                            pass

                        elif la_ == 8:
                            self.state = 995
                            self.match(SQLiteParser.IN_)
                            pass

                        elif la_ == 9:
                            self.state = 996
                            self.match(SQLiteParser.LIKE_)
                            pass

                        elif la_ == 10:
                            self.state = 997
                            self.match(SQLiteParser.GLOB_)
                            pass

                        elif la_ == 11:
                            self.state = 998
                            self.match(SQLiteParser.MATCH_)
                            pass

                        elif la_ == 12:
                            self.state = 999
                            self.match(SQLiteParser.REGEXP_)
                            pass


                        self.state = 1002
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1003
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1004
                        self.match(SQLiteParser.AND_)
                        self.state = 1005
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1006
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1007
                        self.match(SQLiteParser.OR_)
                        self.state = 1008
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1009
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1010
                        self.match(SQLiteParser.IS_)
                        self.state = 1012
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                        if la_ == 1:
                            self.state = 1011
                            self.match(SQLiteParser.NOT_)


                        self.state = 1014
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1015
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==102:
                            self.state = 1016
                            self.match(SQLiteParser.NOT_)


                        self.state = 1019
                        self.match(SQLiteParser.BETWEEN_)
                        self.state = 1020
                        self.expr(0)
                        self.state = 1021
                        self.match(SQLiteParser.AND_)
                        self.state = 1022
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1024
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1025
                        self.match(SQLiteParser.COLLATE_)
                        self.state = 1026
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1027
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==102:
                            self.state = 1028
                            self.match(SQLiteParser.NOT_)


                        self.state = 1031
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2199028498433) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1032
                        self.expr(0)
                        self.state = 1035
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                        if la_ == 1:
                            self.state = 1033
                            self.match(SQLiteParser.ESCAPE_)
                            self.state = 1034
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1037
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1042
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [93]:
                            self.state = 1038
                            self.match(SQLiteParser.ISNULL_)
                            pass
                        elif token in [103]:
                            self.state = 1039
                            self.match(SQLiteParser.NOTNULL_)
                            pass
                        elif token in [102]:
                            self.state = 1040
                            self.match(SQLiteParser.NOT_)
                            self.state = 1041
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1044
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==102:
                            self.state = 1045
                            self.match(SQLiteParser.NOT_)


                        self.state = 1048
                        self.match(SQLiteParser.IN_)
                        self.state = 1087
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                        if la_ == 1:
                            self.state = 1049
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1059
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                            if la_ == 1:
                                self.state = 1050
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1051
                                self.expr(0)
                                self.state = 1056
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==5:
                                    self.state = 1052
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1053
                                    self.expr(0)
                                    self.state = 1058
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1061
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1065
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                            if la_ == 1:
                                self.state = 1062
                                self.schema_name()
                                self.state = 1063
                                self.match(SQLiteParser.DOT)


                            self.state = 1067
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1071
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                            if la_ == 1:
                                self.state = 1068
                                self.schema_name()
                                self.state = 1069
                                self.match(SQLiteParser.DOT)


                            self.state = 1073
                            self.table_function_name()
                            self.state = 1074
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1083
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33552632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4476578029606273023) != 0):
                                self.state = 1075
                                self.expr(0)
                                self.state = 1080
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==5:
                                    self.state = 1076
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1077
                                    self.expr(0)
                                    self.state = 1082
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1085
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(SQLiteParser.RAISE_)
            self.state = 1095
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.state = 1096
                self.match(SQLiteParser.IGNORE_)
                pass
            elif token in [25, 72, 126]:
                self.state = 1097
                _la = self._input.LA(1)
                if not(_la==25 or _la==72 or _la==126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1098
                self.match(SQLiteParser.COMMA)
                self.state = 1099
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1102
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & 4503599627370503) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & 212995) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_value_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_row" ):
                listener.enterValue_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_row" ):
                listener.exitValue_row(self)




    def value_row(self):

        localctx = SQLiteParser.Value_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_value_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1107
            self.expr(0)
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1108
                self.match(SQLiteParser.COMMA)
                self.state = 1109
                self.expr(0)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1115
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def value_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Value_rowContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Value_rowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = SQLiteParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(SQLiteParser.VALUES_)
            self.state = 1118
            self.value_row()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1119
                self.match(SQLiteParser.COMMA)
                self.state = 1120
                self.value_row()
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def values_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Values_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1126
                self.with_clause()


            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1129
                self.match(SQLiteParser.INSERT_)
                pass

            elif la_ == 2:
                self.state = 1130
                self.match(SQLiteParser.REPLACE_)
                pass

            elif la_ == 3:
                self.state = 1131
                self.match(SQLiteParser.INSERT_)
                self.state = 1132
                self.match(SQLiteParser.OR_)
                self.state = 1133
                _la = self._input.LA(1)
                if not(_la==25 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self.state = 1136
            self.match(SQLiteParser.INTO_)
            self.state = 1140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1137
                self.schema_name()
                self.state = 1138
                self.match(SQLiteParser.DOT)


            self.state = 1142
            self.table_name()
            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 1143
                self.match(SQLiteParser.AS_)
                self.state = 1144
                self.table_alias()


            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1147
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1148
                self.column_name()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1149
                    self.match(SQLiteParser.COMMA)
                    self.state = 1150
                    self.column_name()
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1156
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130, 144, 149]:
                self.state = 1162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1160
                    self.values_clause()
                    pass

                elif la_ == 2:
                    self.state = 1161
                    self.select_stmt()
                    pass


                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 1164
                    self.upsert_clause()


                pass
            elif token in [56]:
                self.state = 1167
                self.match(SQLiteParser.DEFAULT_)
                self.state = 1168
                self.match(SQLiteParser.VALUES_)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1171
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING_(self):
            return self.getToken(SQLiteParser.RETURNING_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning_clause" ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning_clause" ):
                listener.exitReturning_clause(self)




    def returning_clause(self):

        localctx = SQLiteParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(SQLiteParser.RETURNING_)
            self.state = 1175
            self.result_column()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1176
                self.match(SQLiteParser.COMMA)
                self.state = 1177
                self.result_column()
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def DO_(self):
            return self.getToken(SQLiteParser.DO_, 0)

        def NOTHING_(self):
            return self.getToken(SQLiteParser.NOTHING_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE_)
            else:
                return self.getToken(SQLiteParser.WHERE_, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(SQLiteParser.ON_)
            self.state = 1184
            self.match(SQLiteParser.CONFLICT_)
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1185
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1186
                self.indexed_column()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1187
                    self.match(SQLiteParser.COMMA)
                    self.state = 1188
                    self.indexed_column()
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1194
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1195
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1196
                    self.expr(0)




            self.state = 1201
            self.match(SQLiteParser.DO_)
            self.state = 1228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.state = 1202
                self.match(SQLiteParser.NOTHING_)
                pass
            elif token in [141]:
                self.state = 1203
                self.match(SQLiteParser.UPDATE_)
                self.state = 1204
                self.match(SQLiteParser.SET_)

                self.state = 1207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1205
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1206
                    self.column_name_list()
                    pass


                self.state = 1209
                self.match(SQLiteParser.ASSIGN)
                self.state = 1210
                self.expr(0)
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1211
                    self.match(SQLiteParser.COMMA)
                    self.state = 1214
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1212
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1213
                        self.column_name_list()
                        pass


                    self.state = 1216
                    self.match(SQLiteParser.ASSIGN)
                    self.state = 1217
                    self.expr(0)
                    self.state = 1223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1224
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1225
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(SQLiteParser.PRAGMA_)
            self.state = 1234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1231
                self.schema_name()
                self.state = 1232
                self.match(SQLiteParser.DOT)


            self.state = 1236
            self.pragma_name()
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 1237
                self.match(SQLiteParser.ASSIGN)
                self.state = 1238
                self.pragma_value()
                pass
            elif token in [3]:
                self.state = 1239
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1240
                self.pragma_value()
                self.state = 1241
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [-1, 1, 30, 31, 35, 38, 47, 50, 59, 61, 63, 66, 71, 88, 112, 119, 120, 122, 126, 129, 130, 141, 143, 144, 149]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pragma_value)
        try:
            self.state = 1248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1247
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(SQLiteParser.REINDEX_)
            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1251
                self.collation_name()

            elif la_ == 2:
                self.state = 1255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1252
                    self.schema_name()
                    self.state = 1253
                    self.match(SQLiteParser.DOT)


                self.state = 1259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1257
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1258
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1263
                self.common_table_stmt()


            self.state = 1266
            self.select_core()
            self.state = 1272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1267
                    self.compound_operator()
                    self.state = 1268
                    self.select_core() 
                self.state = 1274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1275
                self.order_by_stmt()


            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1278
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.table_or_subquery()
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==51 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 562949971511297) != 0):
                self.state = 1282
                self.join_operator()
                self.state = 1283
                self.table_or_subquery()
                self.state = 1285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1284
                    self.join_constraint()


                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExprContext
            self._expr = None # ExprContext
            self.groupByExpr = list() # of ExprContexts
            self.havingExpr = None # ExprContext

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def values_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Values_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.match(SQLiteParser.SELECT_)
                self.state = 1294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1293
                    _la = self._input.LA(1)
                    if not(_la==29 or _la==62):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1296
                self.result_column()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1297
                    self.match(SQLiteParser.COMMA)
                    self.state = 1298
                    self.result_column()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 1304
                    self.match(SQLiteParser.FROM_)
                    self.state = 1314
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                    if la_ == 1:
                        self.state = 1305
                        self.table_or_subquery()
                        self.state = 1310
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 1306
                            self.match(SQLiteParser.COMMA)
                            self.state = 1307
                            self.table_or_subquery()
                            self.state = 1312
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1313
                        self.join_clause()
                        pass




                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1318
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1319
                    localctx.whereExpr = self.expr(0)


                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1322
                    self.match(SQLiteParser.GROUP_)
                    self.state = 1323
                    self.match(SQLiteParser.BY_)
                    self.state = 1324
                    localctx._expr = self.expr(0)
                    localctx.groupByExpr.append(localctx._expr)
                    self.state = 1329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1325
                        self.match(SQLiteParser.COMMA)
                        self.state = 1326
                        localctx._expr = self.expr(0)
                        localctx.groupByExpr.append(localctx._expr)
                        self.state = 1331
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==79:
                        self.state = 1332
                        self.match(SQLiteParser.HAVING_)
                        self.state = 1333
                        localctx.havingExpr = self.expr(0)




                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174:
                    self.state = 1338
                    self.match(SQLiteParser.WINDOW_)
                    self.state = 1339
                    self.window_name()
                    self.state = 1340
                    self.match(SQLiteParser.AS_)
                    self.state = 1341
                    self.window_defn()
                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1342
                        self.match(SQLiteParser.COMMA)
                        self.state = 1343
                        self.window_name()
                        self.state = 1344
                        self.match(SQLiteParser.AS_)
                        self.state = 1345
                        self.window_defn()
                        self.state = 1351
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1354
                self.values_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1359
                self.common_table_stmt()


            self.state = 1362
            self.select_core()
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1363
                self.order_by_stmt()


            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1366
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def UNION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION_)
            else:
                return self.getToken(SQLiteParser.UNION_, i)

        def INTERSECT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT_)
            else:
                return self.getToken(SQLiteParser.INTERSECT_, i)

        def EXCEPT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT_)
            else:
                return self.getToken(SQLiteParser.EXCEPT_, i)

        def ALL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL_)
            else:
                return self.getToken(SQLiteParser.ALL_, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1369
                self.common_table_stmt()


            self.state = 1372
            self.select_core()
            self.state = 1382 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1373
                    self.match(SQLiteParser.UNION_)
                    self.state = 1375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==29:
                        self.state = 1374
                        self.match(SQLiteParser.ALL_)


                    pass
                elif token in [90]:
                    self.state = 1377
                    self.match(SQLiteParser.INTERSECT_)
                    pass
                elif token in [68]:
                    self.state = 1378
                    self.match(SQLiteParser.EXCEPT_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1381
                self.select_core()
                self.state = 1384 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==68 or _la==90 or _la==139):
                    break

            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1386
                self.order_by_stmt()


            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1389
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1392
                    self.schema_name()
                    self.state = 1393
                    self.match(SQLiteParser.DOT)


                self.state = 1397
                self.table_name()
                self.state = 1402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                    if la_ == 1:
                        self.state = 1398
                        self.match(SQLiteParser.AS_)


                    self.state = 1401
                    self.table_alias()


                self.state = 1409
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [85]:
                    self.state = 1404
                    self.match(SQLiteParser.INDEXED_)
                    self.state = 1405
                    self.match(SQLiteParser.BY_)
                    self.state = 1406
                    self.index_name()
                    pass
                elif token in [102]:
                    self.state = 1407
                    self.match(SQLiteParser.NOT_)
                    self.state = 1408
                    self.match(SQLiteParser.INDEXED_)
                    pass
                elif token in [-1, 1, 4, 5, 30, 31, 35, 38, 47, 50, 51, 59, 61, 63, 66, 68, 71, 76, 78, 87, 88, 90, 94, 96, 98, 100, 107, 109, 112, 119, 120, 122, 124, 125, 126, 129, 130, 139, 141, 142, 143, 144, 148, 149, 174]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self.schema_name()
                    self.state = 1412
                    self.match(SQLiteParser.DOT)


                self.state = 1416
                self.table_function_name()
                self.state = 1417
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1418
                self.expr(0)
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1419
                    self.match(SQLiteParser.COMMA)
                    self.state = 1420
                    self.expr(0)
                    self.state = 1425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1426
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1428
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                    if la_ == 1:
                        self.state = 1427
                        self.match(SQLiteParser.AS_)


                    self.state = 1430
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1433
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1434
                    self.table_or_subquery()
                    self.state = 1439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1435
                        self.match(SQLiteParser.COMMA)
                        self.state = 1436
                        self.table_or_subquery()
                        self.state = 1441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1442
                    self.join_clause()
                    pass


                self.state = 1445
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1447
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1448
                self.select_stmt()
                self.state = 1449
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1451
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                    if la_ == 1:
                        self.state = 1450
                        self.match(SQLiteParser.AS_)


                    self.state = 1453
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.table_name()
                self.state = 1460
                self.match(SQLiteParser.DOT)
                self.state = 1461
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1463
                self.expr(0)
                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==185 or _la==188:
                    self.state = 1465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==33:
                        self.state = 1464
                        self.match(SQLiteParser.AS_)


                    self.state = 1467
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def RIGHT_(self):
            return self.getToken(SQLiteParser.RIGHT_, 0)

        def FULL_(self):
            return self.getToken(SQLiteParser.FULL_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [51, 76, 87, 94, 96, 100, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 1473
                    self.match(SQLiteParser.NATURAL_)


                self.state = 1482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [76, 96, 125]:
                    self.state = 1476
                    _la = self._input.LA(1)
                    if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 562949954469889) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==110:
                        self.state = 1477
                        self.match(SQLiteParser.OUTER_)


                    pass
                elif token in [87]:
                    self.state = 1480
                    self.match(SQLiteParser.INNER_)
                    pass
                elif token in [51]:
                    self.state = 1481
                    self.match(SQLiteParser.CROSS_)
                    pass
                elif token in [94]:
                    pass
                else:
                    pass
                self.state = 1484
                self.match(SQLiteParser.JOIN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.match(SQLiteParser.ON_)
                self.state = 1488
                self.expr(0)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                self.match(SQLiteParser.USING_)
                self.state = 1490
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1491
                self.column_name()
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1492
                    self.match(SQLiteParser.COMMA)
                    self.state = 1493
                    self.column_name()
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1499
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1503
                self.match(SQLiteParser.UNION_)
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 1504
                    self.match(SQLiteParser.ALL_)


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.match(SQLiteParser.INTERSECT_)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1508
                self.match(SQLiteParser.EXCEPT_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1511
                self.with_clause()


            self.state = 1514
            self.match(SQLiteParser.UPDATE_)
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1515
                self.match(SQLiteParser.OR_)
                self.state = 1516
                _la = self._input.LA(1)
                if not(_la==25 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1519
            self.qualified_table_name()
            self.state = 1520
            self.match(SQLiteParser.SET_)
            self.state = 1523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1521
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1522
                self.column_name_list()
                pass


            self.state = 1525
            self.match(SQLiteParser.ASSIGN)
            self.state = 1526
            self.expr(0)
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1527
                self.match(SQLiteParser.COMMA)
                self.state = 1530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1528
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1529
                    self.column_name_list()
                    pass


                self.state = 1532
                self.match(SQLiteParser.ASSIGN)
                self.state = 1533
                self.expr(0)
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1540
                self.match(SQLiteParser.FROM_)
                self.state = 1550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1541
                    self.table_or_subquery()
                    self.state = 1546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1542
                        self.match(SQLiteParser.COMMA)
                        self.state = 1543
                        self.table_or_subquery()
                        self.state = 1548
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1549
                    self.join_clause()
                    pass




            self.state = 1556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1554
                self.match(SQLiteParser.WHERE_)
                self.state = 1555
                self.expr(0)


            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1558
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1562
            self.column_name()
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1563
                self.match(SQLiteParser.COMMA)
                self.state = 1564
                self.column_name()
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1570
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1572
                self.with_clause()


            self.state = 1575
            self.match(SQLiteParser.UPDATE_)
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1576
                self.match(SQLiteParser.OR_)
                self.state = 1577
                _la = self._input.LA(1)
                if not(_la==25 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1580
            self.qualified_table_name()
            self.state = 1581
            self.match(SQLiteParser.SET_)
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1582
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1583
                self.column_name_list()
                pass


            self.state = 1586
            self.match(SQLiteParser.ASSIGN)
            self.state = 1587
            self.expr(0)
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1588
                self.match(SQLiteParser.COMMA)
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1589
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1590
                    self.column_name_list()
                    pass


                self.state = 1593
                self.match(SQLiteParser.ASSIGN)
                self.state = 1594
                self.expr(0)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1601
                self.match(SQLiteParser.WHERE_)
                self.state = 1602
                self.expr(0)


            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1605
                self.returning_clause()


            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98 or _la==109:
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1608
                    self.order_by_stmt()


                self.state = 1611
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1614
                self.schema_name()
                self.state = 1615
                self.match(SQLiteParser.DOT)


            self.state = 1619
            self.table_name()
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 1620
                self.match(SQLiteParser.AS_)
                self.state = 1621
                self.alias()


            self.state = 1629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.state = 1624
                self.match(SQLiteParser.INDEXED_)
                self.state = 1625
                self.match(SQLiteParser.BY_)
                self.state = 1626
                self.index_name()
                pass
            elif token in [102]:
                self.state = 1627
                self.match(SQLiteParser.NOT_)
                self.state = 1628
                self.match(SQLiteParser.INDEXED_)
                pass
            elif token in [-1, 1, 30, 31, 35, 38, 47, 50, 59, 61, 63, 66, 71, 88, 98, 109, 112, 119, 120, 122, 124, 126, 129, 130, 131, 141, 143, 144, 148, 149]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(SQLiteParser.VACUUM_)
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1632
                self.schema_name()


            self.state = 1637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1635
                self.match(SQLiteParser.INTO_)
                self.state = 1636
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(SQLiteParser.FILTER_)
            self.state = 1640
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1641
            self.match(SQLiteParser.WHERE_)
            self.state = 1642
            self.expr(0)
            self.state = 1643
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1646
                self.base_window_name()


            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1649
                self.match(SQLiteParser.PARTITION_)
                self.state = 1650
                self.match(SQLiteParser.BY_)
                self.state = 1651
                self.expr(0)
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1652
                    self.match(SQLiteParser.COMMA)
                    self.state = 1653
                    self.expr(0)
                    self.state = 1658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1661
            self.match(SQLiteParser.ORDER_)
            self.state = 1662
            self.match(SQLiteParser.BY_)
            self.state = 1663
            self.ordering_term()
            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1664
                self.match(SQLiteParser.COMMA)
                self.state = 1665
                self.ordering_term()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0):
                self.state = 1671
                self.frame_spec()


            self.state = 1674
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.match(SQLiteParser.OVER_)
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1677
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1678
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1679
                    self.base_window_name()


                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1682
                    self.match(SQLiteParser.PARTITION_)
                    self.state = 1683
                    self.match(SQLiteParser.BY_)
                    self.state = 1684
                    self.expr(0)
                    self.state = 1689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1685
                        self.match(SQLiteParser.COMMA)
                        self.state = 1686
                        self.expr(0)
                        self.state = 1691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1694
                    self.match(SQLiteParser.ORDER_)
                    self.state = 1695
                    self.match(SQLiteParser.BY_)
                    self.state = 1696
                    self.ordering_term()
                    self.state = 1701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1697
                        self.match(SQLiteParser.COMMA)
                        self.state = 1698
                        self.ordering_term()
                        self.state = 1703
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0):
                    self.state = 1706
                    self.frame_spec()


                self.state = 1709
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def OTHERS_(self):
            return self.getToken(SQLiteParser.OTHERS_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def TIES_(self):
            return self.getToken(SQLiteParser.TIES_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_frame_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.frame_clause()
            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==180:
                self.state = 1713
                self.match(SQLiteParser.EXCLUDE_)
                self.state = 1720
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [101]:
                    self.state = 1714
                    self.match(SQLiteParser.NO_)
                    self.state = 1715
                    self.match(SQLiteParser.OTHERS_)
                    pass
                elif token in [157]:
                    self.state = 1716
                    self.match(SQLiteParser.CURRENT_)
                    self.state = 1717
                    self.match(SQLiteParser.ROW_)
                    pass
                elif token in [78]:
                    self.state = 1718
                    self.match(SQLiteParser.GROUP_)
                    pass
                elif token in [181]:
                    self.state = 1719
                    self.match(SQLiteParser.TIES_)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 1725
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1726
                self.match(SQLiteParser.BETWEEN_)
                self.state = 1727
                self.frame_left()
                self.state = 1728
                self.match(SQLiteParser.AND_)
                self.state = 1729
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.simple_func()
            self.state = 1734
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                self.state = 1735
                self.expr(0)
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1736
                    self.match(SQLiteParser.COMMA)
                    self.state = 1737
                    self.expr(0)
                    self.state = 1742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 1743
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1746
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.aggregate_func()
            self.state = 1749
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                self.state = 1751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1750
                    self.match(SQLiteParser.DISTINCT_)


                self.state = 1753
                self.expr(0)
                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1754
                    self.match(SQLiteParser.COMMA)
                    self.state = 1755
                    self.expr(0)
                    self.state = 1760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 1761
                self.match(SQLiteParser.STAR)
                pass
            elif token in [4]:
                pass
            else:
                pass
            self.state = 1764
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1765
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.window_function()
            self.state = 1769
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                self.state = 1770
                self.expr(0)
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1771
                    self.match(SQLiteParser.COMMA)
                    self.state = 1772
                    self.expr(0)
                    self.state = 1777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 1778
                self.match(SQLiteParser.STAR)
                pass
            elif token in [4]:
                pass
            else:
                pass
            self.state = 1781
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1782
                self.filter_clause()


            self.state = 1785
            self.match(SQLiteParser.OVER_)
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 1786
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1787
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.match(SQLiteParser.WITH_)
            self.state = 1792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 1791
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 1794
            self.common_table_expression()
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1795
                self.match(SQLiteParser.COMMA)
                self.state = 1796
                self.common_table_expression()
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.match(SQLiteParser.ORDER_)
            self.state = 1803
            self.match(SQLiteParser.BY_)
            self.state = 1804
            self.ordering_term()
            self.state = 1809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1805
                self.match(SQLiteParser.COMMA)
                self.state = 1806
                self.ordering_term()
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(SQLiteParser.LIMIT_)
            self.state = 1813
            self.expr(0)
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==106:
                self.state = 1814
                _la = self._input.LA(1)
                if not(_la==5 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1815
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.expr(0)
            self.state = 1821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 1819
                self.match(SQLiteParser.COLLATE_)
                self.state = 1820
                self.collation_name()


            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==60:
                self.state = 1823
                self.asc_desc()


            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==175:
                self.state = 1826
                self.match(SQLiteParser.NULLS_)
                self.state = 1827
                _la = self._input.LA(1)
                if not(_la==176 or _la==177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            _la = self._input.LA(1)
            if not(_la==34 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_frame_left)
        try:
            self.state = 1842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1832
                self.expr(0)
                self.state = 1833
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1835
                self.expr(0)
                self.state = 1836
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1838
                self.match(SQLiteParser.CURRENT_)
                self.state = 1839
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1840
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1841
                self.match(SQLiteParser.PRECEDING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_frame_right)
        try:
            self.state = 1854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1844
                self.expr(0)
                self.state = 1845
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1847
                self.expr(0)
                self.state = 1848
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1850
                self.match(SQLiteParser.CURRENT_)
                self.state = 1851
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1852
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1853
                self.match(SQLiteParser.FOLLOWING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_frame_single)
        try:
            self.state = 1863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self.expr(0)
                self.state = 1857
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1860
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1861
                self.match(SQLiteParser.CURRENT_)
                self.state = 1862
                self.match(SQLiteParser.ROW_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def offset(self):
            return self.getTypedRuleContext(SQLiteParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_valueContext,0)


        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 162]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1865
                _la = self._input.LA(1)
                if not(_la==151 or _la==162):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1866
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1867
                self.expr(0)
                self.state = 1868
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1869
                self.match(SQLiteParser.OVER_)
                self.state = 1870
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1871
                    self.partition_by()


                self.state = 1874
                self.order_by_expr_asc_desc()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0):
                    self.state = 1875
                    self.frame_clause()


                self.state = 1878
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [159, 166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                _la = self._input.LA(1)
                if not(_la==159 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1881
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1882
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1883
                self.match(SQLiteParser.OVER_)
                self.state = 1884
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1885
                    self.partition_by()


                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1888
                    self.order_by_expr()


                self.state = 1891
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [160, 167, 168]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1892
                _la = self._input.LA(1)
                if not(((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & 385) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1893
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1894
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1895
                self.match(SQLiteParser.OVER_)
                self.state = 1896
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1897
                    self.partition_by()


                self.state = 1900
                self.order_by_expr_asc_desc()
                self.state = 1901
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [161, 163]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1903
                _la = self._input.LA(1)
                if not(_la==161 or _la==163):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1904
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1905
                self.expr(0)
                self.state = 1907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 1906
                    self.offset()


                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1909
                    self.default_value()


                self.state = 1912
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1913
                self.match(SQLiteParser.OVER_)
                self.state = 1914
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1915
                    self.partition_by()


                self.state = 1918
                self.order_by_expr_asc_desc()
                self.state = 1919
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1921
                self.match(SQLiteParser.NTH_VALUE_)
                self.state = 1922
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1923
                self.expr(0)
                self.state = 1924
                self.match(SQLiteParser.COMMA)
                self.state = 1925
                self.signed_number()
                self.state = 1926
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1927
                self.match(SQLiteParser.OVER_)
                self.state = 1928
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1929
                    self.partition_by()


                self.state = 1932
                self.order_by_expr_asc_desc()
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0):
                    self.state = 1933
                    self.frame_clause()


                self.state = 1936
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1938
                self.match(SQLiteParser.NTILE_)
                self.state = 1939
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1940
                self.expr(0)
                self.state = 1941
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1942
                self.match(SQLiteParser.OVER_)
                self.state = 1943
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1944
                    self.partition_by()


                self.state = 1947
                self.order_by_expr_asc_desc()
                self.state = 1948
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = SQLiteParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.match(SQLiteParser.COMMA)
            self.state = 1953
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = SQLiteParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            self.match(SQLiteParser.COMMA)
            self.state = 1956
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1958
            self.match(SQLiteParser.PARTITION_)
            self.state = 1959
            self.match(SQLiteParser.BY_)
            self.state = 1961 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1960
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1963 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.match(SQLiteParser.ORDER_)
            self.state = 1966
            self.match(SQLiteParser.BY_)
            self.state = 1968 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1967
                self.expr(0)
                self.state = 1970 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -33552632) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4476578029606273023) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.match(SQLiteParser.ORDER_)
            self.state = 1973
            self.match(SQLiteParser.BY_)
            self.state = 1974
            self.expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.expr(0)
            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==60:
                self.state = 1977
                self.asc_desc()


            self.state = 1987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1980
                self.match(SQLiteParser.COMMA)
                self.state = 1981
                self.expr(0)
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==60:
                    self.state = 1982
                    self.asc_desc()


                self.state = 1989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_select" ):
                listener.enterRecursive_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_select" ):
                listener.exitRecursive_select(self)




    def recursive_select(self):

        localctx = SQLiteParser.Recursive_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_recursive_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1792) != 0) or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_module_argument)
        try:
            self.state = 2000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            _la = self._input.LA(1)
            if not(_la==185 or _la==188):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def ACTION_(self):
            return self.getToken(SQLiteParser.ACTION_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def CASCADE_(self):
            return self.getToken(SQLiteParser.CASCADE_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def FULL_(self):
            return self.getToken(SQLiteParser.FULL_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF_(self):
            return self.getToken(SQLiteParser.OF_, 0)

        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def RESTRICT_(self):
            return self.getToken(SQLiteParser.RESTRICT_, 0)

        def RIGHT_(self):
            return self.getToken(SQLiteParser.RIGHT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def THEN_(self):
            return self.getToken(SQLiteParser.THEN_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -33554432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007199254740991) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_any_name)
        try:
            self.state = 2059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [185]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2052
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2053
                self.keyword()
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2054
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2055
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2056
                self.any_name()
                self.state = 2057
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




